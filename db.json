{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/ticketPlayWright.jpg","path":"images/ticketPlayWright.jpg","modified":0,"renderable":0},{"_id":"source/images/resume_icon.jpg","path":"images/resume_icon.jpg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/886a749e.css","path":"static/886a749e.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/3e25f349.css","path":"static/css/3e25f349.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/882f9706.css","path":"static/css/882f9706.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/9a0271b0.css","path":"static/css/9a0271b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/dccf965f.jpg","path":"static/img/dccf965f.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/120aa8f8.js","path":"static/js/120aa8f8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/6b275704.css","path":"static/css/6b275704.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/8e0e69c4.css","path":"static/css/8e0e69c4.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/a14e1a22.css","path":"static/css/a14e1a22.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/22ac7e7f.js","path":"static/js/22ac7e7f.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/415fa29b.js","path":"static/js/415fa29b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/36429e9b.js","path":"static/js/36429e9b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/53ed1a6f.js","path":"static/js/53ed1a6f.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7d897144.js","path":"static/js/7d897144.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/8da07a12.js","path":"static/js/8da07a12.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7e80f274.js","path":"static/js/7e80f274.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/a92e6a1c.js","path":"static/js/a92e6a1c.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9cb479b5.js","path":"static/js/9cb479b5.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/c562793b.js","path":"static/js/c562793b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9aa0d897.js","path":"static/js/9aa0d897.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/d57a5994.js","path":"static/js/d57a5994.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/ff251d5d.js","path":"static/js/ff251d5d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/fffbee97.js","path":"static/js/fffbee97.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"51ebc02711a88bd4864328f869504580b23271d5","modified":1741587876267},{"_id":"source/_posts/pythonProgram.md","hash":"c814744986c288a0ff488587d909d18f1aa223e0","modified":1741591825594},{"_id":"source/_posts/ticketPlayWright.md","hash":"ff900ea6729faebfdd57d3f94a7894b491539020","modified":1749548009327},{"_id":"source/CNAME","hash":"b60de6adf88a00ccff58bb570069739cc5b1d77b","modified":1749451809132},{"_id":"source/images/ticketPlayWright.jpg","hash":"06ce790eea70eaf2c7da9b495bf9d63590b00ae1","modified":1749543832652},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"953a91ce5eb62368e3fe1d335e8ccd024983b4fb","modified":1741317987119},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"c5825d6aed607fd4c5d85d261aed39e2d9d59c81","modified":1741317985776},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"8b5aea1bd91a6428040ec154ef313d20129fd1ce","modified":1741317987128},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1741317985577},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1741317987157},{"_id":"node_modules/hexo-theme-aurora/source/static/css/3e25f349.css","hash":"2859941dbaabcdf25bfb6379a0efaf6b02b45971","modified":1741317985616},{"_id":"node_modules/hexo-theme-aurora/source/static/css/882f9706.css","hash":"156eb90b06b5f6f6f0bf24973874ecd85906f8fd","modified":1741317985659},{"_id":"node_modules/hexo-theme-aurora/source/static/886a749e.css","hash":"46ef385b52d11142f603d0916042be66e4e04b46","modified":1741317985676},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1741317985822},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1741317987189},{"_id":"node_modules/hexo-theme-aurora/source/static/img/dccf965f.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1741317985964},{"_id":"node_modules/hexo-theme-aurora/public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1741317987142},{"_id":"node_modules/hexo-theme-aurora/public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1741317985795},{"_id":"node_modules/hexo-theme-aurora/source/static/css/9a0271b0.css","hash":"140052b8339ae6633bfdb6544050ba97c72ee630","modified":1741317985708},{"_id":"node_modules/hexo-theme-aurora/source/static/css/6b275704.css","hash":"b04a2cd1a356e16cded5392bad271ce2f5b1c455","modified":1741317985625},{"_id":"node_modules/hexo-theme-aurora/source/static/css/8e0e69c4.css","hash":"5e2ac4baf9923ea59d1dbddccb44a0e4ffbdc87f","modified":1741317985702},{"_id":"node_modules/hexo-theme-aurora/source/static/js/22ac7e7f.js","hash":"cdc1e66e812e4ce762170e6c2008a89ddb50ac22","modified":1741317987004},{"_id":"node_modules/hexo-theme-aurora/public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1741317987173},{"_id":"node_modules/hexo-theme-aurora/source/static/js/36429e9b.js","hash":"f1eb144273d1914ffd000cd6ab8ebf4603566fa1","modified":1741317987006},{"_id":"node_modules/hexo-theme-aurora/source/static/js/415fa29b.js","hash":"8bbf6514805e9634eeb37d58ab9476fe7b4acab9","modified":1741317987021},{"_id":"node_modules/hexo-theme-aurora/source/static/js/8da07a12.js","hash":"bbf25dc2749fc8ec6cd379e69a27d5e5ee116da1","modified":1741317987043},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7d897144.js","hash":"bc14613b9e836e8802949241e443176c3923a4ae","modified":1741317987042},{"_id":"node_modules/hexo-theme-aurora/source/static/js/a92e6a1c.js","hash":"15838a598d2c67734d4e28d6667a148e3315862f","modified":1741317987051},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9cb479b5.js","hash":"41d6681d53d8ca77f4df159d831237550a80939c","modified":1741317987050},{"_id":"node_modules/hexo-theme-aurora/source/static/js/c562793b.js","hash":"ef13be62aaee32758e059e625e6b85504c53f822","modified":1741317987052},{"_id":"node_modules/hexo-theme-aurora/source/static/js/53ed1a6f.js","hash":"392525c36d6f623723427c09a42cc7178f0aa65c","modified":1741317987040},{"_id":"node_modules/hexo-theme-aurora/source/static/js/d57a5994.js","hash":"baeabc2ef1f3ed1b2f651a436032cedc42e16d78","modified":1741317987072},{"_id":"node_modules/hexo-theme-aurora/source/static/js/fffbee97.js","hash":"6a539112698cb0925ea4da8af22f3e8cdc554e3f","modified":1741317987105},{"_id":"source/images/avatar.jpeg","hash":"5e2aea8db1e83e8b2f4ec639b262089e75bd7253","modified":1741578685469},{"_id":"node_modules/hexo-theme-aurora/source/static/js/9aa0d897.js","hash":"da073d8793e58e2bd92cd879d753966950ea6d7e","modified":1741317987044},{"_id":"node_modules/hexo-theme-aurora/source/static/js/7e80f274.js","hash":"3e055cf0e8e1e795571b0ac307ebd9d055874bd9","modified":1741317987043},{"_id":"source/images/resume_icon.jpg","hash":"c299299dd807a44858e6438de31c405b02804cad","modified":1741579104060},{"_id":"node_modules/hexo-theme-aurora/source/static/js/ff251d5d.js","hash":"21fe31757fa0993c2a3d34009b8fa19e421e4dfb","modified":1741317987085},{"_id":"node_modules/hexo-theme-aurora/source/static/css/a14e1a22.css","hash":"d4f364239f1c63b66b9917062e6a7cd9fa26fcba","modified":1741317985756},{"_id":"node_modules/hexo-theme-aurora/source/static/js/120aa8f8.js","hash":"84afbda7eecf891fae3fdac5219582c322d903ee","modified":1741317987003},{"_id":"public/api/posts/1.json","hash":"f08b9dffe54584720d4a3a4f9480e171de1c05cc","modified":1753669513177},{"_id":"public/api/archives/1.json","hash":"f08b9dffe54584720d4a3a4f9480e171de1c05cc","modified":1753669513177},{"_id":"public/api/articles/ticketPlayWright.json","hash":"908a24d55cecd51c1a3b8f346eeaa21d5e1b2a8d","modified":1753669513177},{"_id":"public/api/articles/pythonProgram.json","hash":"483813e29bf6a8afebb2bb3a41eaaee9cef602bf","modified":1753669513177},{"_id":"public/api/features.json","hash":"070e6b3d961cdf1f259e2dea2d32b1179190f3af","modified":1753669513177},{"_id":"public/api/authors/blog-author.json","hash":"c9ea599d3a37a89dcbce4f42082b8e8ca7dbe431","modified":1753669513177},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1751423910898},{"_id":"public/api/tags.json","hash":"ec182c8a46084444330ef88670e09af77edf4855","modified":1753669513177},{"_id":"public/api/tags/python.json","hash":"2adf1ef0abe38647ce5b310e07fd05a53f8ffc65","modified":1753669513177},{"_id":"public/api/tags/爬虫.json","hash":"6f7c65ba537d3c550642c19a56f7034e9d4b7147","modified":1753669513177},{"_id":"public/api/tags/playwright.json","hash":"9addeb0c57f4b5c6fddb58cdb9264b58b5f4f8f1","modified":1753668979883},{"_id":"public/api/pages/about/index.json","hash":"e7c3871d7bcf1c6ecef8d36ff19a4d5b670d43a5","modified":1751423910898},{"_id":"public/api/statistic.json","hash":"05958a8deaa971bcf6cfeaf8678eda7db4c8c7f9","modified":1753669513177},{"_id":"public/api/search.json","hash":"bfccea156d768202b9cc3d22e1c15e4cba1d3630","modified":1753669513177},{"_id":"public/api/site.json","hash":"c791918c1699e373cbc1531db214f38b510cc892","modified":1753668979883},{"_id":"public/post/ticketPlayWright.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/post/pythonProgram.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/tags/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/archives/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/page/about/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/tags/search/index.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1751423910898},{"_id":"public/CNAME","hash":"b60de6adf88a00ccff58bb570069739cc5b1d77b","modified":1751423910898},{"_id":"public/images/ticketPlayWright.jpg","hash":"06ce790eea70eaf2c7da9b495bf9d63590b00ae1","modified":1751423910898},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1751423910898},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1751423910898},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1751423910898},{"_id":"public/static/img/dccf965f.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1751423910898},{"_id":"public/images/avatar.jpeg","hash":"5e2aea8db1e83e8b2f4ec639b262089e75bd7253","modified":1751423910898},{"_id":"public/static/886a749e.css","hash":"46ef385b52d11142f603d0916042be66e4e04b46","modified":1751423910898},{"_id":"public/static/css/3e25f349.css","hash":"2859941dbaabcdf25bfb6379a0efaf6b02b45971","modified":1751423910898},{"_id":"public/static/css/882f9706.css","hash":"156eb90b06b5f6f6f0bf24973874ecd85906f8fd","modified":1751423910898},{"_id":"public/static/css/9a0271b0.css","hash":"140052b8339ae6633bfdb6544050ba97c72ee630","modified":1751423910898},{"_id":"public/static/css/6b275704.css","hash":"b04a2cd1a356e16cded5392bad271ce2f5b1c455","modified":1751423910898},{"_id":"public/static/css/8e0e69c4.css","hash":"5e2ac4baf9923ea59d1dbddccb44a0e4ffbdc87f","modified":1751423910898},{"_id":"public/static/js/22ac7e7f.js","hash":"cdc1e66e812e4ce762170e6c2008a89ddb50ac22","modified":1751423910898},{"_id":"public/static/css/a14e1a22.css","hash":"d4f364239f1c63b66b9917062e6a7cd9fa26fcba","modified":1751423910898},{"_id":"public/static/js/36429e9b.js","hash":"f1eb144273d1914ffd000cd6ab8ebf4603566fa1","modified":1751423910898},{"_id":"public/static/js/415fa29b.js","hash":"8bbf6514805e9634eeb37d58ab9476fe7b4acab9","modified":1751423910898},{"_id":"public/static/js/53ed1a6f.js","hash":"392525c36d6f623723427c09a42cc7178f0aa65c","modified":1751423910898},{"_id":"public/static/js/7d897144.js","hash":"bc14613b9e836e8802949241e443176c3923a4ae","modified":1751423910898},{"_id":"public/static/js/8da07a12.js","hash":"bbf25dc2749fc8ec6cd379e69a27d5e5ee116da1","modified":1751423910898},{"_id":"public/static/js/120aa8f8.js","hash":"84afbda7eecf891fae3fdac5219582c322d903ee","modified":1751423910898},{"_id":"public/static/js/7e80f274.js","hash":"3e055cf0e8e1e795571b0ac307ebd9d055874bd9","modified":1751423910898},{"_id":"public/static/js/a92e6a1c.js","hash":"15838a598d2c67734d4e28d6667a148e3315862f","modified":1751423910898},{"_id":"public/static/js/9cb479b5.js","hash":"41d6681d53d8ca77f4df159d831237550a80939c","modified":1751423910898},{"_id":"public/static/js/c562793b.js","hash":"ef13be62aaee32758e059e625e6b85504c53f822","modified":1751423910898},{"_id":"public/static/js/9aa0d897.js","hash":"da073d8793e58e2bd92cd879d753966950ea6d7e","modified":1751423910898},{"_id":"public/static/js/d57a5994.js","hash":"baeabc2ef1f3ed1b2f651a436032cedc42e16d78","modified":1751423910898},{"_id":"public/static/js/ff251d5d.js","hash":"21fe31757fa0993c2a3d34009b8fa19e421e4dfb","modified":1751423910898},{"_id":"public/static/js/fffbee97.js","hash":"6a539112698cb0925ea4da8af22f3e8cdc554e3f","modified":1751423910898},{"_id":"public/images/resume_icon.jpg","hash":"c299299dd807a44858e6438de31c405b02804cad","modified":1751423910898},{"_id":"source/_posts/flaskDeploy.md","hash":"133cb16a9d21c4b322500977a61e2430bbbc3f63","modified":1753669135396},{"_id":"public/api/articles/flaskDeploy.json","hash":"7b1e95d5e8427483ba389bc289197732ff1ec545","modified":1753669513177},{"_id":"public/api/tags/服务器部署.json","hash":"f2a68e17685387e54bf49f952f6f60932a33be22","modified":1753669513177},{"_id":"public/post/flaskDeploy.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1753668979883},{"_id":"source/_posts/vedioStorage.md","hash":"dc213672cabc81814a061489323b63dbede99f38","modified":1753669503874},{"_id":"public/api/articles/vedioStorage.json","hash":"dd9a6ccd4ae917db654199ab993920187653dea8","modified":1753669513177},{"_id":"public/api/tags/服务搭建.json","hash":"836216d6be9c9a61b2c39481f3a796934b202944","modified":1753669513177},{"_id":"public/api/tags/ftp.json","hash":"ab0a95fcb5c59cf90ea6a66f540d68e721dcb71e","modified":1753669513177},{"_id":"public/post/vedioStorage.html","hash":"bcf20ddfa10eb6fcb732dd719351146a93ff4f53","modified":1753669513177}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2025-03-07T04:02:43.000Z","tags":"Resume","abstracts":"个人简历包含工作经历、项目经历","cover":"./images/resume_icon.jpg","_content":"\n# 工作经历\n\n## 上海企顺信息系统有限公司\n### 技术栈：\nASP.NET Core、MongoDB、LINQ、BsonSerializer、身份验证（Token）、日志系统 SignalR、Vue.js、Axios、TimerScheduler、JS、HTML\n\n### 工作内容：\n- **后端开发**\n  - 参与公司 **线上学习系统** 开发，负责 `ExamPaper`、`AnswerSheet`、`Course`、`Item` 等核心模块的 `Service` 和 `Controller` 层代码编写，实现 **CRUD 及业务逻辑**。\n  - 采用 **SignalR** 实现教师端与学生端的实时通信，通过 `Hub` 机制支持 **教师远程控制课件页**，并向学生推送 **单道题目或整套试卷**。\n\n- **自动批改系统**\n  - 设计并实现填空题的 **自动批改逻辑**，处理标准答案和候选答案匹配、空格数权重计算等复杂评分规则。\n  - 使用 **BsonSerializer** 解析 MongoDB 数据，优化填空题答案匹配算法，提高批改准确率和性能。\n\n- **数据查询优化**\n  - 采用 **LINQ 方法链语法** 进行 MongoDB 数据过滤，提高查询效率和代码可读性。\n  - 结合 **Lambda 表达式** 提高数据处理效率，实现更灵活的查询逻辑。\n\n- **安全与权限管理**\n  - 采用 **Token 加密** 用户身份和账户信息，存储于网页 Cookie，防止会话劫持和信息泄露。\n  - 实现 **权限控制机制**，防止不同身份及同身份不同账号的越权操作，确保系统数据安全。\n\n- **日志系统**\n  - 设计并开发 **日志记录系统**，详细记录用户角色的操作行为，便于审计和追踪系统异常。\n\n- **自动化任务调度**\n  - 开发 **TimerScheduler**，实现 **每日凌晨 1 点** 自动统计所有学生的做题情况，避免高并发查询带来的性能瓶颈，提高系统稳定性和响应速度。\n\n- **高并发优化**\n  - 采用 **分布式架构**，支持 **多服务器负载均衡** 处理大规模用户连接。\n  - 通过 **Kestrel** 提高 WebSocket 连接稳定性，减少延迟。\n\n### 项目成果与价值：\n- 提升 **WebSocket 连接稳定性**，实现低延迟的消息推送。\n- **优化数据同步策略**，确保所有客户端数据一致性。\n- **可扩展性强**，适用于聊天系统、竞拍平台、实时监控等多个场景。\n- 结合 **MongoDB** 存储历史数据，支持查询和回放功能。\n\n---\n\n## 上海海勃物流软件公司\n### 技术栈：\nSpring Boot、MyBatis、HashMap、RESTful API、项目管理系统开发\n\n### 工作内容：\n- 参与公司 **内部项目管理系统** 开发（类似禅道），负责 `Task`、`Product`、`Milestone`、`Project` **四大核心模块** 的设计与实现。\n- 采用 **Spring Boot + MyBatis** 构建后端服务，独立完成 `Entity`、`DAO`、`Service`、`Controller` 层的开发，实现 **数据存储与业务逻辑处理**。\n- 使用 **HashMap** 进行数据封装与返回，提高系统数据处理效率。\n- 设计并撰写详细的 **开发文档**，确保代码可读性与可维护性，便于后续开发和团队协作。\n\n### 项目成果：\n- 按期交付 **4 大核心模块**，代码通过 **SonarQube 质量检测（零严重缺陷）**。\n- 编写 **12 份技术文档**，包含 **模块设计 / 接口规范 / 部署指南**，形成完整知识库。\n\n---\n\n# 项目经历\n\n## 基于 Selenium 和 Tampermonkey 的自动化购票与竞拍数据收集系统\n### 项目概述：\n本项目旨在针对 **SNH48 官网购票及竞拍系统** 进行自动化优化，提高购票成功率，并高效收集竞拍数据。\n\n### 核心功能：\n1. **自动化购票脚本**\n   - 使用 **Selenium** 控制 **Edge 浏览器**，模拟用户操作。\n   - 支持 **手动输入购票参数**（票种、购票时间），灵活适配不同场景。\n   - 采用 **多线程并发请求** 提高抢票成功率，同时优化网络请求减少延迟。\n\n2. **竞拍数据收集**\n   - 使用 **Tampermonkey** 编写浏览器脚本，在竞拍页面自动抓取 **竞拍物品 ID、当前价格、出价次数** 等信息。\n   - 支持数据 **实时存储至 MongoDB**，便于后续分析与统计。\n   - **Excel 一键导出**，方便离线查看与处理竞拍数据。\n\n3. **日志与异常处理**\n   - 记录 API 请求频率，并 **自动调整请求策略**，防止触发风控机制（限制每 **0.136108 秒** 最多 3 次请求）。\n   - 购票失败时 **自动重试**，并支持 **手动设定结束时间**，保证抢票策略灵活可控。\n   - 使用 **tkinter 信息框** 提示用户购票结果，优化用户体验。\n\n### 技术栈：\nPython、JavaScript、Selenium (Edge WebDriver)、Tampermonkey、MongoDB、PyInstaller\n\n---\n\n## 基于 Unity 的多人在线枪战游戏\n### 项目概述：\n独立开发了一款 **基于 Unity 的多人在线 FPS（第一人称射击）游戏**，支持实时网络对战和服务器同步。\n\n### 核心功能：\n- **游戏架构**：基于 **Unity 的 MonoBehaviour 和 NetworkBehaviour**，实现客户端与服务器端的逻辑分离。\n- **网络同步**：使用 **ServerRpc** 处理服务器端操作，**ClientRpc** 进行客户端状态更新，确保游戏状态一致性。\n- **多人匹配**：支持 **多人在线匹配**，优化网络通信，提高同步效率，减少延迟。\n- **角色控制**：实现 **玩家移动、射击、血量同步**，并优化射击精度与碰撞检测。\n- **性能优化**：优化 **网络数据传输**，减少带宽消耗，提高游戏流畅度。\n\n### 技术栈：\nC#、Unity、MonoBehaviour、NetworkBehaviour、ServerRpc、ClientRpc\n\n---\n\n## 基于 SpringBoot 的贪吃蛇联机对战小游戏（King Of Bots）\n### 项目概述：\n独立开发了一款 **基于浏览器的多人在线贪吃蛇游戏**，支持实时匹配对战和用户身份验证。\n\n### 主要内容：\n- **前后端分离架构**，确保系统的模块化和可维护性。\n- **jQuery + Ajax 优化用户交互体验**，实现直观且响应迅速的操作界面。\n- **WebSocket 实现实时通信**，保障玩家间对战的即时性和同步性。\n- **Spring Boot 开发 RESTful API**，提升系统交互效率和稳定性。\n- **匹配池微服务**，优化玩家匹配流程，降低游戏等待时间。\n- **MySQL 数据库管理**，存储用户数据及游戏记录，优化查询性能。\n- **JWT 用户身份验证**，结合 LocalStorage 安全存储令牌，提高系统安全性。\n\n### 技术栈：\nSpring Boot、MySQL、jQuery、Ajax、WebSocket、JWT\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-03-07 12:02:43\ntags: Resume\nabstracts: 个人简历包含工作经历、项目经历\ncover: ./images/resume_icon.jpg\n---\n\n# 工作经历\n\n## 上海企顺信息系统有限公司\n### 技术栈：\nASP.NET Core、MongoDB、LINQ、BsonSerializer、身份验证（Token）、日志系统 SignalR、Vue.js、Axios、TimerScheduler、JS、HTML\n\n### 工作内容：\n- **后端开发**\n  - 参与公司 **线上学习系统** 开发，负责 `ExamPaper`、`AnswerSheet`、`Course`、`Item` 等核心模块的 `Service` 和 `Controller` 层代码编写，实现 **CRUD 及业务逻辑**。\n  - 采用 **SignalR** 实现教师端与学生端的实时通信，通过 `Hub` 机制支持 **教师远程控制课件页**，并向学生推送 **单道题目或整套试卷**。\n\n- **自动批改系统**\n  - 设计并实现填空题的 **自动批改逻辑**，处理标准答案和候选答案匹配、空格数权重计算等复杂评分规则。\n  - 使用 **BsonSerializer** 解析 MongoDB 数据，优化填空题答案匹配算法，提高批改准确率和性能。\n\n- **数据查询优化**\n  - 采用 **LINQ 方法链语法** 进行 MongoDB 数据过滤，提高查询效率和代码可读性。\n  - 结合 **Lambda 表达式** 提高数据处理效率，实现更灵活的查询逻辑。\n\n- **安全与权限管理**\n  - 采用 **Token 加密** 用户身份和账户信息，存储于网页 Cookie，防止会话劫持和信息泄露。\n  - 实现 **权限控制机制**，防止不同身份及同身份不同账号的越权操作，确保系统数据安全。\n\n- **日志系统**\n  - 设计并开发 **日志记录系统**，详细记录用户角色的操作行为，便于审计和追踪系统异常。\n\n- **自动化任务调度**\n  - 开发 **TimerScheduler**，实现 **每日凌晨 1 点** 自动统计所有学生的做题情况，避免高并发查询带来的性能瓶颈，提高系统稳定性和响应速度。\n\n- **高并发优化**\n  - 采用 **分布式架构**，支持 **多服务器负载均衡** 处理大规模用户连接。\n  - 通过 **Kestrel** 提高 WebSocket 连接稳定性，减少延迟。\n\n### 项目成果与价值：\n- 提升 **WebSocket 连接稳定性**，实现低延迟的消息推送。\n- **优化数据同步策略**，确保所有客户端数据一致性。\n- **可扩展性强**，适用于聊天系统、竞拍平台、实时监控等多个场景。\n- 结合 **MongoDB** 存储历史数据，支持查询和回放功能。\n\n---\n\n## 上海海勃物流软件公司\n### 技术栈：\nSpring Boot、MyBatis、HashMap、RESTful API、项目管理系统开发\n\n### 工作内容：\n- 参与公司 **内部项目管理系统** 开发（类似禅道），负责 `Task`、`Product`、`Milestone`、`Project` **四大核心模块** 的设计与实现。\n- 采用 **Spring Boot + MyBatis** 构建后端服务，独立完成 `Entity`、`DAO`、`Service`、`Controller` 层的开发，实现 **数据存储与业务逻辑处理**。\n- 使用 **HashMap** 进行数据封装与返回，提高系统数据处理效率。\n- 设计并撰写详细的 **开发文档**，确保代码可读性与可维护性，便于后续开发和团队协作。\n\n### 项目成果：\n- 按期交付 **4 大核心模块**，代码通过 **SonarQube 质量检测（零严重缺陷）**。\n- 编写 **12 份技术文档**，包含 **模块设计 / 接口规范 / 部署指南**，形成完整知识库。\n\n---\n\n# 项目经历\n\n## 基于 Selenium 和 Tampermonkey 的自动化购票与竞拍数据收集系统\n### 项目概述：\n本项目旨在针对 **SNH48 官网购票及竞拍系统** 进行自动化优化，提高购票成功率，并高效收集竞拍数据。\n\n### 核心功能：\n1. **自动化购票脚本**\n   - 使用 **Selenium** 控制 **Edge 浏览器**，模拟用户操作。\n   - 支持 **手动输入购票参数**（票种、购票时间），灵活适配不同场景。\n   - 采用 **多线程并发请求** 提高抢票成功率，同时优化网络请求减少延迟。\n\n2. **竞拍数据收集**\n   - 使用 **Tampermonkey** 编写浏览器脚本，在竞拍页面自动抓取 **竞拍物品 ID、当前价格、出价次数** 等信息。\n   - 支持数据 **实时存储至 MongoDB**，便于后续分析与统计。\n   - **Excel 一键导出**，方便离线查看与处理竞拍数据。\n\n3. **日志与异常处理**\n   - 记录 API 请求频率，并 **自动调整请求策略**，防止触发风控机制（限制每 **0.136108 秒** 最多 3 次请求）。\n   - 购票失败时 **自动重试**，并支持 **手动设定结束时间**，保证抢票策略灵活可控。\n   - 使用 **tkinter 信息框** 提示用户购票结果，优化用户体验。\n\n### 技术栈：\nPython、JavaScript、Selenium (Edge WebDriver)、Tampermonkey、MongoDB、PyInstaller\n\n---\n\n## 基于 Unity 的多人在线枪战游戏\n### 项目概述：\n独立开发了一款 **基于 Unity 的多人在线 FPS（第一人称射击）游戏**，支持实时网络对战和服务器同步。\n\n### 核心功能：\n- **游戏架构**：基于 **Unity 的 MonoBehaviour 和 NetworkBehaviour**，实现客户端与服务器端的逻辑分离。\n- **网络同步**：使用 **ServerRpc** 处理服务器端操作，**ClientRpc** 进行客户端状态更新，确保游戏状态一致性。\n- **多人匹配**：支持 **多人在线匹配**，优化网络通信，提高同步效率，减少延迟。\n- **角色控制**：实现 **玩家移动、射击、血量同步**，并优化射击精度与碰撞检测。\n- **性能优化**：优化 **网络数据传输**，减少带宽消耗，提高游戏流畅度。\n\n### 技术栈：\nC#、Unity、MonoBehaviour、NetworkBehaviour、ServerRpc、ClientRpc\n\n---\n\n## 基于 SpringBoot 的贪吃蛇联机对战小游戏（King Of Bots）\n### 项目概述：\n独立开发了一款 **基于浏览器的多人在线贪吃蛇游戏**，支持实时匹配对战和用户身份验证。\n\n### 主要内容：\n- **前后端分离架构**，确保系统的模块化和可维护性。\n- **jQuery + Ajax 优化用户交互体验**，实现直观且响应迅速的操作界面。\n- **WebSocket 实现实时通信**，保障玩家间对战的即时性和同步性。\n- **Spring Boot 开发 RESTful API**，提升系统交互效率和稳定性。\n- **匹配池微服务**，优化玩家匹配流程，降低游戏等待时间。\n- **MySQL 数据库管理**，存储用户数据及游戏记录，优化查询性能。\n- **JWT 用户身份验证**，结合 LocalStorage 安全存储令牌，提高系统安全性。\n\n### 技术栈：\nSpring Boot、MySQL、jQuery、Ajax、WebSocket、JWT\n","updated":"2025-03-10T06:24:36.267Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmclckrnp000010u7fepzgzdv","content":"<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"上海企顺信息系统有限公司\"><a href=\"#上海企顺信息系统有限公司\" class=\"headerlink\" title=\"上海企顺信息系统有限公司\"></a>上海企顺信息系统有限公司</h2><h3 id=\"技术栈：\"><a href=\"#技术栈：\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>ASP.NET Core、MongoDB、LINQ、BsonSerializer、身份验证（Token）、日志系统 SignalR、Vue.js、Axios、TimerScheduler、JS、HTML</p>\n<h3 id=\"工作内容：\"><a href=\"#工作内容：\" class=\"headerlink\" title=\"工作内容：\"></a>工作内容：</h3><ul>\n<li><p><strong>后端开发</strong></p>\n<ul>\n<li>参与公司 <strong>线上学习系统</strong> 开发，负责 <code>ExamPaper</code>、<code>AnswerSheet</code>、<code>Course</code>、<code>Item</code> 等核心模块的 <code>Service</code> 和 <code>Controller</code> 层代码编写，实现 <strong>CRUD 及业务逻辑</strong>。</li>\n<li>采用 <strong>SignalR</strong> 实现教师端与学生端的实时通信，通过 <code>Hub</code> 机制支持 <strong>教师远程控制课件页</strong>，并向学生推送 <strong>单道题目或整套试卷</strong>。</li>\n</ul>\n</li>\n<li><p><strong>自动批改系统</strong></p>\n<ul>\n<li>设计并实现填空题的 <strong>自动批改逻辑</strong>，处理标准答案和候选答案匹配、空格数权重计算等复杂评分规则。</li>\n<li>使用 <strong>BsonSerializer</strong> 解析 MongoDB 数据，优化填空题答案匹配算法，提高批改准确率和性能。</li>\n</ul>\n</li>\n<li><p><strong>数据查询优化</strong></p>\n<ul>\n<li>采用 <strong>LINQ 方法链语法</strong> 进行 MongoDB 数据过滤，提高查询效率和代码可读性。</li>\n<li>结合 <strong>Lambda 表达式</strong> 提高数据处理效率，实现更灵活的查询逻辑。</li>\n</ul>\n</li>\n<li><p><strong>安全与权限管理</strong></p>\n<ul>\n<li>采用 <strong>Token 加密</strong> 用户身份和账户信息，存储于网页 Cookie，防止会话劫持和信息泄露。</li>\n<li>实现 <strong>权限控制机制</strong>，防止不同身份及同身份不同账号的越权操作，确保系统数据安全。</li>\n</ul>\n</li>\n<li><p><strong>日志系统</strong></p>\n<ul>\n<li>设计并开发 <strong>日志记录系统</strong>，详细记录用户角色的操作行为，便于审计和追踪系统异常。</li>\n</ul>\n</li>\n<li><p><strong>自动化任务调度</strong></p>\n<ul>\n<li>开发 <strong>TimerScheduler</strong>，实现 <strong>每日凌晨 1 点</strong> 自动统计所有学生的做题情况，避免高并发查询带来的性能瓶颈，提高系统稳定性和响应速度。</li>\n</ul>\n</li>\n<li><p><strong>高并发优化</strong></p>\n<ul>\n<li>采用 <strong>分布式架构</strong>，支持 <strong>多服务器负载均衡</strong> 处理大规模用户连接。</li>\n<li>通过 <strong>Kestrel</strong> 提高 WebSocket 连接稳定性，减少延迟。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"项目成果与价值：\"><a href=\"#项目成果与价值：\" class=\"headerlink\" title=\"项目成果与价值：\"></a>项目成果与价值：</h3><ul>\n<li>提升 <strong>WebSocket 连接稳定性</strong>，实现低延迟的消息推送。</li>\n<li><strong>优化数据同步策略</strong>，确保所有客户端数据一致性。</li>\n<li><strong>可扩展性强</strong>，适用于聊天系统、竞拍平台、实时监控等多个场景。</li>\n<li>结合 <strong>MongoDB</strong> 存储历史数据，支持查询和回放功能。</li>\n</ul>\n<hr>\n<h2 id=\"上海海勃物流软件公司\"><a href=\"#上海海勃物流软件公司\" class=\"headerlink\" title=\"上海海勃物流软件公司\"></a>上海海勃物流软件公司</h2><h3 id=\"技术栈：-1\"><a href=\"#技术栈：-1\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>Spring Boot、MyBatis、HashMap、RESTful API、项目管理系统开发</p>\n<h3 id=\"工作内容：-1\"><a href=\"#工作内容：-1\" class=\"headerlink\" title=\"工作内容：\"></a>工作内容：</h3><ul>\n<li>参与公司 <strong>内部项目管理系统</strong> 开发（类似禅道），负责 <code>Task</code>、<code>Product</code>、<code>Milestone</code>、<code>Project</code> <strong>四大核心模块</strong> 的设计与实现。</li>\n<li>采用 <strong>Spring Boot + MyBatis</strong> 构建后端服务，独立完成 <code>Entity</code>、<code>DAO</code>、<code>Service</code>、<code>Controller</code> 层的开发，实现 <strong>数据存储与业务逻辑处理</strong>。</li>\n<li>使用 <strong>HashMap</strong> 进行数据封装与返回，提高系统数据处理效率。</li>\n<li>设计并撰写详细的 <strong>开发文档</strong>，确保代码可读性与可维护性，便于后续开发和团队协作。</li>\n</ul>\n<h3 id=\"项目成果：\"><a href=\"#项目成果：\" class=\"headerlink\" title=\"项目成果：\"></a>项目成果：</h3><ul>\n<li>按期交付 <strong>4 大核心模块</strong>，代码通过 <strong>SonarQube 质量检测（零严重缺陷）</strong>。</li>\n<li>编写 <strong>12 份技术文档</strong>，包含 <strong>模块设计 &#x2F; 接口规范 &#x2F; 部署指南</strong>，形成完整知识库。</li>\n</ul>\n<hr>\n<h1 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h1><h2 id=\"基于-Selenium-和-Tampermonkey-的自动化购票与竞拍数据收集系统\"><a href=\"#基于-Selenium-和-Tampermonkey-的自动化购票与竞拍数据收集系统\" class=\"headerlink\" title=\"基于 Selenium 和 Tampermonkey 的自动化购票与竞拍数据收集系统\"></a>基于 Selenium 和 Tampermonkey 的自动化购票与竞拍数据收集系统</h2><h3 id=\"项目概述：\"><a href=\"#项目概述：\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>本项目旨在针对 <strong>SNH48 官网购票及竞拍系统</strong> 进行自动化优化，提高购票成功率，并高效收集竞拍数据。</p>\n<h3 id=\"核心功能：\"><a href=\"#核心功能：\" class=\"headerlink\" title=\"核心功能：\"></a>核心功能：</h3><ol>\n<li><p><strong>自动化购票脚本</strong></p>\n<ul>\n<li>使用 <strong>Selenium</strong> 控制 <strong>Edge 浏览器</strong>，模拟用户操作。</li>\n<li>支持 <strong>手动输入购票参数</strong>（票种、购票时间），灵活适配不同场景。</li>\n<li>采用 <strong>多线程并发请求</strong> 提高抢票成功率，同时优化网络请求减少延迟。</li>\n</ul>\n</li>\n<li><p><strong>竞拍数据收集</strong></p>\n<ul>\n<li>使用 <strong>Tampermonkey</strong> 编写浏览器脚本，在竞拍页面自动抓取 <strong>竞拍物品 ID、当前价格、出价次数</strong> 等信息。</li>\n<li>支持数据 <strong>实时存储至 MongoDB</strong>，便于后续分析与统计。</li>\n<li><strong>Excel 一键导出</strong>，方便离线查看与处理竞拍数据。</li>\n</ul>\n</li>\n<li><p><strong>日志与异常处理</strong></p>\n<ul>\n<li>记录 API 请求频率，并 <strong>自动调整请求策略</strong>，防止触发风控机制（限制每 <strong>0.136108 秒</strong> 最多 3 次请求）。</li>\n<li>购票失败时 <strong>自动重试</strong>，并支持 <strong>手动设定结束时间</strong>，保证抢票策略灵活可控。</li>\n<li>使用 <strong>tkinter 信息框</strong> 提示用户购票结果，优化用户体验。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"技术栈：-2\"><a href=\"#技术栈：-2\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>Python、JavaScript、Selenium (Edge WebDriver)、Tampermonkey、MongoDB、PyInstaller</p>\n<hr>\n<h2 id=\"基于-Unity-的多人在线枪战游戏\"><a href=\"#基于-Unity-的多人在线枪战游戏\" class=\"headerlink\" title=\"基于 Unity 的多人在线枪战游戏\"></a>基于 Unity 的多人在线枪战游戏</h2><h3 id=\"项目概述：-1\"><a href=\"#项目概述：-1\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>独立开发了一款 <strong>基于 Unity 的多人在线 FPS（第一人称射击）游戏</strong>，支持实时网络对战和服务器同步。</p>\n<h3 id=\"核心功能：-1\"><a href=\"#核心功能：-1\" class=\"headerlink\" title=\"核心功能：\"></a>核心功能：</h3><ul>\n<li><strong>游戏架构</strong>：基于 <strong>Unity 的 MonoBehaviour 和 NetworkBehaviour</strong>，实现客户端与服务器端的逻辑分离。</li>\n<li><strong>网络同步</strong>：使用 <strong>ServerRpc</strong> 处理服务器端操作，<strong>ClientRpc</strong> 进行客户端状态更新，确保游戏状态一致性。</li>\n<li><strong>多人匹配</strong>：支持 <strong>多人在线匹配</strong>，优化网络通信，提高同步效率，减少延迟。</li>\n<li><strong>角色控制</strong>：实现 <strong>玩家移动、射击、血量同步</strong>，并优化射击精度与碰撞检测。</li>\n<li><strong>性能优化</strong>：优化 <strong>网络数据传输</strong>，减少带宽消耗，提高游戏流畅度。</li>\n</ul>\n<h3 id=\"技术栈：-3\"><a href=\"#技术栈：-3\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>C#、Unity、MonoBehaviour、NetworkBehaviour、ServerRpc、ClientRpc</p>\n<hr>\n<h2 id=\"基于-SpringBoot-的贪吃蛇联机对战小游戏（King-Of-Bots）\"><a href=\"#基于-SpringBoot-的贪吃蛇联机对战小游戏（King-Of-Bots）\" class=\"headerlink\" title=\"基于 SpringBoot 的贪吃蛇联机对战小游戏（King Of Bots）\"></a>基于 SpringBoot 的贪吃蛇联机对战小游戏（King Of Bots）</h2><h3 id=\"项目概述：-2\"><a href=\"#项目概述：-2\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>独立开发了一款 <strong>基于浏览器的多人在线贪吃蛇游戏</strong>，支持实时匹配对战和用户身份验证。</p>\n<h3 id=\"主要内容：\"><a href=\"#主要内容：\" class=\"headerlink\" title=\"主要内容：\"></a>主要内容：</h3><ul>\n<li><strong>前后端分离架构</strong>，确保系统的模块化和可维护性。</li>\n<li><strong>jQuery + Ajax 优化用户交互体验</strong>，实现直观且响应迅速的操作界面。</li>\n<li><strong>WebSocket 实现实时通信</strong>，保障玩家间对战的即时性和同步性。</li>\n<li><strong>Spring Boot 开发 RESTful API</strong>，提升系统交互效率和稳定性。</li>\n<li><strong>匹配池微服务</strong>，优化玩家匹配流程，降低游戏等待时间。</li>\n<li><strong>MySQL 数据库管理</strong>，存储用户数据及游戏记录，优化查询性能。</li>\n<li><strong>JWT 用户身份验证</strong>，结合 LocalStorage 安全存储令牌，提高系统安全性。</li>\n</ul>\n<h3 id=\"技术栈：-4\"><a href=\"#技术栈：-4\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>Spring Boot、MySQL、jQuery、Ajax、WebSocket、JWT</p>\n","excerpt":"","more":"<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"上海企顺信息系统有限公司\"><a href=\"#上海企顺信息系统有限公司\" class=\"headerlink\" title=\"上海企顺信息系统有限公司\"></a>上海企顺信息系统有限公司</h2><h3 id=\"技术栈：\"><a href=\"#技术栈：\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>ASP.NET Core、MongoDB、LINQ、BsonSerializer、身份验证（Token）、日志系统 SignalR、Vue.js、Axios、TimerScheduler、JS、HTML</p>\n<h3 id=\"工作内容：\"><a href=\"#工作内容：\" class=\"headerlink\" title=\"工作内容：\"></a>工作内容：</h3><ul>\n<li><p><strong>后端开发</strong></p>\n<ul>\n<li>参与公司 <strong>线上学习系统</strong> 开发，负责 <code>ExamPaper</code>、<code>AnswerSheet</code>、<code>Course</code>、<code>Item</code> 等核心模块的 <code>Service</code> 和 <code>Controller</code> 层代码编写，实现 <strong>CRUD 及业务逻辑</strong>。</li>\n<li>采用 <strong>SignalR</strong> 实现教师端与学生端的实时通信，通过 <code>Hub</code> 机制支持 <strong>教师远程控制课件页</strong>，并向学生推送 <strong>单道题目或整套试卷</strong>。</li>\n</ul>\n</li>\n<li><p><strong>自动批改系统</strong></p>\n<ul>\n<li>设计并实现填空题的 <strong>自动批改逻辑</strong>，处理标准答案和候选答案匹配、空格数权重计算等复杂评分规则。</li>\n<li>使用 <strong>BsonSerializer</strong> 解析 MongoDB 数据，优化填空题答案匹配算法，提高批改准确率和性能。</li>\n</ul>\n</li>\n<li><p><strong>数据查询优化</strong></p>\n<ul>\n<li>采用 <strong>LINQ 方法链语法</strong> 进行 MongoDB 数据过滤，提高查询效率和代码可读性。</li>\n<li>结合 <strong>Lambda 表达式</strong> 提高数据处理效率，实现更灵活的查询逻辑。</li>\n</ul>\n</li>\n<li><p><strong>安全与权限管理</strong></p>\n<ul>\n<li>采用 <strong>Token 加密</strong> 用户身份和账户信息，存储于网页 Cookie，防止会话劫持和信息泄露。</li>\n<li>实现 <strong>权限控制机制</strong>，防止不同身份及同身份不同账号的越权操作，确保系统数据安全。</li>\n</ul>\n</li>\n<li><p><strong>日志系统</strong></p>\n<ul>\n<li>设计并开发 <strong>日志记录系统</strong>，详细记录用户角色的操作行为，便于审计和追踪系统异常。</li>\n</ul>\n</li>\n<li><p><strong>自动化任务调度</strong></p>\n<ul>\n<li>开发 <strong>TimerScheduler</strong>，实现 <strong>每日凌晨 1 点</strong> 自动统计所有学生的做题情况，避免高并发查询带来的性能瓶颈，提高系统稳定性和响应速度。</li>\n</ul>\n</li>\n<li><p><strong>高并发优化</strong></p>\n<ul>\n<li>采用 <strong>分布式架构</strong>，支持 <strong>多服务器负载均衡</strong> 处理大规模用户连接。</li>\n<li>通过 <strong>Kestrel</strong> 提高 WebSocket 连接稳定性，减少延迟。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"项目成果与价值：\"><a href=\"#项目成果与价值：\" class=\"headerlink\" title=\"项目成果与价值：\"></a>项目成果与价值：</h3><ul>\n<li>提升 <strong>WebSocket 连接稳定性</strong>，实现低延迟的消息推送。</li>\n<li><strong>优化数据同步策略</strong>，确保所有客户端数据一致性。</li>\n<li><strong>可扩展性强</strong>，适用于聊天系统、竞拍平台、实时监控等多个场景。</li>\n<li>结合 <strong>MongoDB</strong> 存储历史数据，支持查询和回放功能。</li>\n</ul>\n<hr>\n<h2 id=\"上海海勃物流软件公司\"><a href=\"#上海海勃物流软件公司\" class=\"headerlink\" title=\"上海海勃物流软件公司\"></a>上海海勃物流软件公司</h2><h3 id=\"技术栈：-1\"><a href=\"#技术栈：-1\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>Spring Boot、MyBatis、HashMap、RESTful API、项目管理系统开发</p>\n<h3 id=\"工作内容：-1\"><a href=\"#工作内容：-1\" class=\"headerlink\" title=\"工作内容：\"></a>工作内容：</h3><ul>\n<li>参与公司 <strong>内部项目管理系统</strong> 开发（类似禅道），负责 <code>Task</code>、<code>Product</code>、<code>Milestone</code>、<code>Project</code> <strong>四大核心模块</strong> 的设计与实现。</li>\n<li>采用 <strong>Spring Boot + MyBatis</strong> 构建后端服务，独立完成 <code>Entity</code>、<code>DAO</code>、<code>Service</code>、<code>Controller</code> 层的开发，实现 <strong>数据存储与业务逻辑处理</strong>。</li>\n<li>使用 <strong>HashMap</strong> 进行数据封装与返回，提高系统数据处理效率。</li>\n<li>设计并撰写详细的 <strong>开发文档</strong>，确保代码可读性与可维护性，便于后续开发和团队协作。</li>\n</ul>\n<h3 id=\"项目成果：\"><a href=\"#项目成果：\" class=\"headerlink\" title=\"项目成果：\"></a>项目成果：</h3><ul>\n<li>按期交付 <strong>4 大核心模块</strong>，代码通过 <strong>SonarQube 质量检测（零严重缺陷）</strong>。</li>\n<li>编写 <strong>12 份技术文档</strong>，包含 <strong>模块设计 &#x2F; 接口规范 &#x2F; 部署指南</strong>，形成完整知识库。</li>\n</ul>\n<hr>\n<h1 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h1><h2 id=\"基于-Selenium-和-Tampermonkey-的自动化购票与竞拍数据收集系统\"><a href=\"#基于-Selenium-和-Tampermonkey-的自动化购票与竞拍数据收集系统\" class=\"headerlink\" title=\"基于 Selenium 和 Tampermonkey 的自动化购票与竞拍数据收集系统\"></a>基于 Selenium 和 Tampermonkey 的自动化购票与竞拍数据收集系统</h2><h3 id=\"项目概述：\"><a href=\"#项目概述：\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>本项目旨在针对 <strong>SNH48 官网购票及竞拍系统</strong> 进行自动化优化，提高购票成功率，并高效收集竞拍数据。</p>\n<h3 id=\"核心功能：\"><a href=\"#核心功能：\" class=\"headerlink\" title=\"核心功能：\"></a>核心功能：</h3><ol>\n<li><p><strong>自动化购票脚本</strong></p>\n<ul>\n<li>使用 <strong>Selenium</strong> 控制 <strong>Edge 浏览器</strong>，模拟用户操作。</li>\n<li>支持 <strong>手动输入购票参数</strong>（票种、购票时间），灵活适配不同场景。</li>\n<li>采用 <strong>多线程并发请求</strong> 提高抢票成功率，同时优化网络请求减少延迟。</li>\n</ul>\n</li>\n<li><p><strong>竞拍数据收集</strong></p>\n<ul>\n<li>使用 <strong>Tampermonkey</strong> 编写浏览器脚本，在竞拍页面自动抓取 <strong>竞拍物品 ID、当前价格、出价次数</strong> 等信息。</li>\n<li>支持数据 <strong>实时存储至 MongoDB</strong>，便于后续分析与统计。</li>\n<li><strong>Excel 一键导出</strong>，方便离线查看与处理竞拍数据。</li>\n</ul>\n</li>\n<li><p><strong>日志与异常处理</strong></p>\n<ul>\n<li>记录 API 请求频率，并 <strong>自动调整请求策略</strong>，防止触发风控机制（限制每 <strong>0.136108 秒</strong> 最多 3 次请求）。</li>\n<li>购票失败时 <strong>自动重试</strong>，并支持 <strong>手动设定结束时间</strong>，保证抢票策略灵活可控。</li>\n<li>使用 <strong>tkinter 信息框</strong> 提示用户购票结果，优化用户体验。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"技术栈：-2\"><a href=\"#技术栈：-2\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>Python、JavaScript、Selenium (Edge WebDriver)、Tampermonkey、MongoDB、PyInstaller</p>\n<hr>\n<h2 id=\"基于-Unity-的多人在线枪战游戏\"><a href=\"#基于-Unity-的多人在线枪战游戏\" class=\"headerlink\" title=\"基于 Unity 的多人在线枪战游戏\"></a>基于 Unity 的多人在线枪战游戏</h2><h3 id=\"项目概述：-1\"><a href=\"#项目概述：-1\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>独立开发了一款 <strong>基于 Unity 的多人在线 FPS（第一人称射击）游戏</strong>，支持实时网络对战和服务器同步。</p>\n<h3 id=\"核心功能：-1\"><a href=\"#核心功能：-1\" class=\"headerlink\" title=\"核心功能：\"></a>核心功能：</h3><ul>\n<li><strong>游戏架构</strong>：基于 <strong>Unity 的 MonoBehaviour 和 NetworkBehaviour</strong>，实现客户端与服务器端的逻辑分离。</li>\n<li><strong>网络同步</strong>：使用 <strong>ServerRpc</strong> 处理服务器端操作，<strong>ClientRpc</strong> 进行客户端状态更新，确保游戏状态一致性。</li>\n<li><strong>多人匹配</strong>：支持 <strong>多人在线匹配</strong>，优化网络通信，提高同步效率，减少延迟。</li>\n<li><strong>角色控制</strong>：实现 <strong>玩家移动、射击、血量同步</strong>，并优化射击精度与碰撞检测。</li>\n<li><strong>性能优化</strong>：优化 <strong>网络数据传输</strong>，减少带宽消耗，提高游戏流畅度。</li>\n</ul>\n<h3 id=\"技术栈：-3\"><a href=\"#技术栈：-3\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>C#、Unity、MonoBehaviour、NetworkBehaviour、ServerRpc、ClientRpc</p>\n<hr>\n<h2 id=\"基于-SpringBoot-的贪吃蛇联机对战小游戏（King-Of-Bots）\"><a href=\"#基于-SpringBoot-的贪吃蛇联机对战小游戏（King-Of-Bots）\" class=\"headerlink\" title=\"基于 SpringBoot 的贪吃蛇联机对战小游戏（King Of Bots）\"></a>基于 SpringBoot 的贪吃蛇联机对战小游戏（King Of Bots）</h2><h3 id=\"项目概述：-2\"><a href=\"#项目概述：-2\" class=\"headerlink\" title=\"项目概述：\"></a>项目概述：</h3><p>独立开发了一款 <strong>基于浏览器的多人在线贪吃蛇游戏</strong>，支持实时匹配对战和用户身份验证。</p>\n<h3 id=\"主要内容：\"><a href=\"#主要内容：\" class=\"headerlink\" title=\"主要内容：\"></a>主要内容：</h3><ul>\n<li><strong>前后端分离架构</strong>，确保系统的模块化和可维护性。</li>\n<li><strong>jQuery + Ajax 优化用户交互体验</strong>，实现直观且响应迅速的操作界面。</li>\n<li><strong>WebSocket 实现实时通信</strong>，保障玩家间对战的即时性和同步性。</li>\n<li><strong>Spring Boot 开发 RESTful API</strong>，提升系统交互效率和稳定性。</li>\n<li><strong>匹配池微服务</strong>，优化玩家匹配流程，降低游戏等待时间。</li>\n<li><strong>MySQL 数据库管理</strong>，存储用户数据及游戏记录，优化查询性能。</li>\n<li><strong>JWT 用户身份验证</strong>，结合 LocalStorage 安全存储令牌，提高系统安全性。</li>\n</ul>\n<h3 id=\"技术栈：-4\"><a href=\"#技术栈：-4\" class=\"headerlink\" title=\"技术栈：\"></a>技术栈：</h3><p>Spring Boot、MySQL、jQuery、Ajax、WebSocket、JWT</p>\n"}],"Post":[{"title":"丝芭商城竞价数据统计","date":"2025-03-10T06:31:23.000Z","abstracts":"收集丝芭特殊场竞价公演以及竞价拍立得数据","cover":"./images/resume_icon.jpg","_content":"\n:::warning\n本系统仅适用于丝芭商城，其他商城请自行修改代码。\n本系统爬虫仅用于学习交流，请勿用于非法用途。\n:::\n\n# 丝芭商城数据导出工具  \n\n## 项目简介  \n本项目是一个用于 **自动化抓取和导出丝芭商城（https://shop.48.cn）拍卖数据** 的 Python 工具。  \n用户可以获取 **指定拍卖页面** 的信息，并将其整理后导出为 **Excel 文件**。  \n\n## 功能介绍  \n- **自动获取拍卖数据**：解析商品详情页，提取关键信息，如竞拍价格、出价记录等。  \n- **数据存储**：将抓取的数据存入 Excel，方便后续分析。  \n- **Tampermonkey 脚本支持**：支持在浏览器中使用 Tampermonkey 直接获取数据。  \n- **多线程优化**：提升请求效率，减少等待时间。  \n- **防反爬策略**：加入请求间隔控制，降低被封风险。  \n\n## 代码主要实现部分  \n\n### 🎯 **1.获取竞价成功与失败数据**\n\n#### 📌 **函数：`auto_bid_until_end`**\n此函数用于自动执行竞价过程，直到达到指定的成功竞价数量，并收集所有竞价数据，包括成功和失败的竞价信息。  \n\n##### 📌 **函数参数**  \n- `driver`：WebDriver 实例，用于与网页交互。  \n- `target_successful_count`：目标成功竞价的数量。  \n- `bid_type`：竞价类型（座位类别）。  \n- `theater_name`：剧院名称。  \n\n##### 📜 **代码实现**  \n\n```python\ndef auto_bid_until_end(driver, target_successful_count, bid_type, theater_name):\n    successful_bids_data = []  # 存储所有成功竞价信息\n    unsuccessful_bids_data = []  # 存储所有未成功竞价信息\n    total_bids_data = []\n    wait = WebDriverWait(driver, 10)\n\n    # 获取最大页数\n    max_page_element = driver.find_element(By.XPATH, '/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div[4]/span[3]')\n    max_page = int(max_page_element.text)\n    now_page = 1\n\n    # 📌 **获取成功竞价数据**\n    while now_page <= max_page:\n        u_blist = driver.find_element(By.ID, \"u_blist\")\n        successful_bids_data.extend(parse_successful_bids(u_blist))\n\n        if len(successful_bids_data) >= target_successful_count:\n            print(\"✅ 已获取所有成功竞价信息\")\n            break\n\n        # 检查 `u_blistM` 是否存在额外的成功竞价信息\n        u_blistM = driver.find_element(By.ID, \"u_blistM\")\n        successful_bids_data.extend(parse_successful_bids(u_blistM))\n\n        if len(successful_bids_data) >= target_successful_count:\n            print(\"✅ 已获取所有成功竞价信息\")\n            break\n\n        # 📌 **翻页**\n        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id=\"a_b_n\"]')))\n        next_button.click()\n        print(f\"🔄 加载第 {now_page} 页...\")\n        now_page += 1\n        time.sleep(0.15)\n\n    # 📌 **获取未成功竞价数据**\n    while now_page <= max_page:\n        u_blist = driver.find_element(By.ID, \"u_blist\")\n        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blist, successful_bids_data))\n\n        # 检查 `u_blistM` 是否存在额外的未成功竞价信息\n        u_blistM = driver.find_element(By.ID, \"u_blistM\")\n        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blistM, successful_bids_data))\n\n        # 📌 **翻页**\n        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id=\"a_b_n\"]')))\n        next_button.click()\n        print(f\"🔄 加载第 {now_page} 页...\")\n        now_page += 1\n        time.sleep(0.15)\n\n    # **去重处理**\n    unsuccessful_bids_data = deduplication(unsuccessful_bids_data)\n    total_bids_data = successful_bids_data + unsuccessful_bids_data\n\n    # 📌 **获取座位信息**\n    seats = get_seat_positon(theater_name, bid_type, target_successful_count)\n\n    # **分配座位号**\n    for idx, bid in enumerate(total_bids_data):\n        bid[\"座位类型\"] = bid_type\n        if idx > len(seats) - 1:\n            bid[\"座位号\"] = \"竞价失败\"\n        else:\n            bid[\"座位号\"] = seats[idx]  # 添加座位号\n\n    return total_bids_data\n```\n\n### 🎯 **2.统计当前页面竞价数据前的准备活动**\n\n#### 📌 **函数：`stats_one_good`**\n此函数用于获取丝芭商城的单页面下的竞价数据，并将其保存到 Excel 文件中。\n\n##### 📜 **代码实现**\n```python\ndef stats_one_good(driver):\n    # 📌 获取剧院名称和 Excel 文件名\n    theater_name = driver.find_element(By.XPATH, \"/html/body/div[2]/div/div[2]/div[2]/ul/li[2]/p\").text\n    excel_name = driver.find_element(By.XPATH, \"/html/body/div[2]/div/div[2]/div[2]/ul/li[1]\").text\n\n    # 📌 获取商品标题\n    title_name_element = driver.find_element(By.CLASS_NAME, \"i_tit\")\n    title_name = title_name_element.text.strip()  # 获取文本内容并去除首尾空格\n\n    # 📌 获取商品详细信息并判断是否为生日公演\n    item_info = driver.find_element(By.XPATH, '//*[@id=\"TabTab03Con1\"]').get_attribute('outerHTML')\n    soup = BeautifulSoup(item_info, 'html.parser')\n    item_info_text = soup.get_text()\n    birthday = \"生日潮流包\" in item_info_text\n\n    # 📌 确定竞价类型\n    bid_type = get_seat_type(title_name)\n\n    # 📌 根据剧场和商品类型选择相应的竞价数量\n    if \"SNH\" in theater_name and \"星梦剧院\" in title_name and \"MINILIVE\" not in title_name:\n        bid_number = get_bid_number_SNH(bid_type, driver)\n        if birthday:\n            theater_name = \"SNHbirthday\"\n\n    elif \"SNH\" in theater_name and \"星梦空间\" in title_name and \"MINILIVE\" not in title_name:\n        bid_number = get_bid_number_HGH(bid_type)\n        theater_name = \"HGH\"\n\n    elif \"BEJ\" in theater_name and \"生日会\" not in title_name:\n        bid_number = get_bid_number_BEJ(driver)\n\n    elif \"MINILIVE\" in title_name:\n        bid_number = get_bid_number_MiniLive(driver)\n        theater_name = \"MINILIVE\"\n\n    elif \"拍立得\" in title_name:\n        bid_number = get_bid_number_pld(driver)\n        theater_name = \"拍立得\"\n\n    elif \"生日会\" in title_name:\n        bid_number = get_bid_number_birthparty(driver, theater_name)\n        theater_name = \"生日会\"\n\n    print(f\"🎫 竞价席位总数：{bid_number}\")\n\n    # 📌 竞价流程\n    if bid_number != 0:\n        max_bid_num = bid_number\n        total_bids_data = auto_bid_until_end(driver, max_bid_num, bid_type, theater_name)\n\n        # 📌 获取商品 ID 并保存 Excel 数据\n        item_id = get_item_name(driver)\n        save_excel(total_bids_data, item_id, excel_name)\n\n    # 📌 刷新页面，准备下一次操作\n    driver.refresh()\n```\n\n### 📊 **3.保存竞价数据到 Excel**\n\n#### 📌 **函数：`save_excel`**\n此函数用于将竞价成功的数据保存到 Excel 文件，支持写入商品名称、表头、竞价信息，并更新统计信息（最小/最大出价、最早/最晚出价等）。\n\n##### 📜 **代码实现**\n```python\ndef save_excel(successful_bids_data, item_name, output_file=\"bidding_results.xlsx\"):\n    \"\"\"\n    将竞价成功数据保存到 Excel 文件。\n\n    :param successful_bids_data: 竞价成功的数据列表\n    :param item_name: 商品名称\n    :param output_file: 输出文件名（默认：\"bidding_results.xlsx\"）\n    \"\"\"\n\n    # 📌 将数据转换为 Pandas DataFrame\n    df = pd.DataFrame(successful_bids_data)\n    \n    # 📌 创建 Excel 工作簿和工作表\n    wb = Workbook()\n    ws = wb.active\n    ws.title = \"Bidding Results\"\n    \n    # 📌 在 Excel 文件的第一行写入商品名称\n    ws.append([item_name])\n    \n    # 📌 写入表头并加粗\n    header = [\"出价状态\", \"出价人\", \"出价时间\", \"出价金额\", \"座位类型\", \"座位号\"]\n    ws.append(header)\n    \n    for cell in ws[2]:  # 第二行是标题行\n        cell.font = Font(bold=True)\n    \n    # 📌 将竞价数据写入 Excel\n    for row in dataframe_to_rows(df, index=False, header=False):\n        ws.append(row)\n    \n    # 📌 更新最小/最大出价、最早/最晚出价的出价人信息\n    ws = update_min_max_info(df, ws)\n\n    # 📌 保存 Excel 文件\n    wb.save(output_file + \".xlsx\")\n    print(f\"✅ 竞价成功信息已保存至 {output_file}.xlsx\")\n```\n\n\n\n","source":"_posts/pythonProgram.md","raw":"---\ntitle: 丝芭商城竞价数据统计\ndate: 2025-03-10 14:31:23\nabstracts: 收集丝芭特殊场竞价公演以及竞价拍立得数据\ntags: [python,爬虫]\ncover: ./images/resume_icon.jpg\n---\n\n:::warning\n本系统仅适用于丝芭商城，其他商城请自行修改代码。\n本系统爬虫仅用于学习交流，请勿用于非法用途。\n:::\n\n# 丝芭商城数据导出工具  \n\n## 项目简介  \n本项目是一个用于 **自动化抓取和导出丝芭商城（https://shop.48.cn）拍卖数据** 的 Python 工具。  \n用户可以获取 **指定拍卖页面** 的信息，并将其整理后导出为 **Excel 文件**。  \n\n## 功能介绍  \n- **自动获取拍卖数据**：解析商品详情页，提取关键信息，如竞拍价格、出价记录等。  \n- **数据存储**：将抓取的数据存入 Excel，方便后续分析。  \n- **Tampermonkey 脚本支持**：支持在浏览器中使用 Tampermonkey 直接获取数据。  \n- **多线程优化**：提升请求效率，减少等待时间。  \n- **防反爬策略**：加入请求间隔控制，降低被封风险。  \n\n## 代码主要实现部分  \n\n### 🎯 **1.获取竞价成功与失败数据**\n\n#### 📌 **函数：`auto_bid_until_end`**\n此函数用于自动执行竞价过程，直到达到指定的成功竞价数量，并收集所有竞价数据，包括成功和失败的竞价信息。  \n\n##### 📌 **函数参数**  \n- `driver`：WebDriver 实例，用于与网页交互。  \n- `target_successful_count`：目标成功竞价的数量。  \n- `bid_type`：竞价类型（座位类别）。  \n- `theater_name`：剧院名称。  \n\n##### 📜 **代码实现**  \n\n```python\ndef auto_bid_until_end(driver, target_successful_count, bid_type, theater_name):\n    successful_bids_data = []  # 存储所有成功竞价信息\n    unsuccessful_bids_data = []  # 存储所有未成功竞价信息\n    total_bids_data = []\n    wait = WebDriverWait(driver, 10)\n\n    # 获取最大页数\n    max_page_element = driver.find_element(By.XPATH, '/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div[4]/span[3]')\n    max_page = int(max_page_element.text)\n    now_page = 1\n\n    # 📌 **获取成功竞价数据**\n    while now_page <= max_page:\n        u_blist = driver.find_element(By.ID, \"u_blist\")\n        successful_bids_data.extend(parse_successful_bids(u_blist))\n\n        if len(successful_bids_data) >= target_successful_count:\n            print(\"✅ 已获取所有成功竞价信息\")\n            break\n\n        # 检查 `u_blistM` 是否存在额外的成功竞价信息\n        u_blistM = driver.find_element(By.ID, \"u_blistM\")\n        successful_bids_data.extend(parse_successful_bids(u_blistM))\n\n        if len(successful_bids_data) >= target_successful_count:\n            print(\"✅ 已获取所有成功竞价信息\")\n            break\n\n        # 📌 **翻页**\n        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id=\"a_b_n\"]')))\n        next_button.click()\n        print(f\"🔄 加载第 {now_page} 页...\")\n        now_page += 1\n        time.sleep(0.15)\n\n    # 📌 **获取未成功竞价数据**\n    while now_page <= max_page:\n        u_blist = driver.find_element(By.ID, \"u_blist\")\n        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blist, successful_bids_data))\n\n        # 检查 `u_blistM` 是否存在额外的未成功竞价信息\n        u_blistM = driver.find_element(By.ID, \"u_blistM\")\n        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blistM, successful_bids_data))\n\n        # 📌 **翻页**\n        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id=\"a_b_n\"]')))\n        next_button.click()\n        print(f\"🔄 加载第 {now_page} 页...\")\n        now_page += 1\n        time.sleep(0.15)\n\n    # **去重处理**\n    unsuccessful_bids_data = deduplication(unsuccessful_bids_data)\n    total_bids_data = successful_bids_data + unsuccessful_bids_data\n\n    # 📌 **获取座位信息**\n    seats = get_seat_positon(theater_name, bid_type, target_successful_count)\n\n    # **分配座位号**\n    for idx, bid in enumerate(total_bids_data):\n        bid[\"座位类型\"] = bid_type\n        if idx > len(seats) - 1:\n            bid[\"座位号\"] = \"竞价失败\"\n        else:\n            bid[\"座位号\"] = seats[idx]  # 添加座位号\n\n    return total_bids_data\n```\n\n### 🎯 **2.统计当前页面竞价数据前的准备活动**\n\n#### 📌 **函数：`stats_one_good`**\n此函数用于获取丝芭商城的单页面下的竞价数据，并将其保存到 Excel 文件中。\n\n##### 📜 **代码实现**\n```python\ndef stats_one_good(driver):\n    # 📌 获取剧院名称和 Excel 文件名\n    theater_name = driver.find_element(By.XPATH, \"/html/body/div[2]/div/div[2]/div[2]/ul/li[2]/p\").text\n    excel_name = driver.find_element(By.XPATH, \"/html/body/div[2]/div/div[2]/div[2]/ul/li[1]\").text\n\n    # 📌 获取商品标题\n    title_name_element = driver.find_element(By.CLASS_NAME, \"i_tit\")\n    title_name = title_name_element.text.strip()  # 获取文本内容并去除首尾空格\n\n    # 📌 获取商品详细信息并判断是否为生日公演\n    item_info = driver.find_element(By.XPATH, '//*[@id=\"TabTab03Con1\"]').get_attribute('outerHTML')\n    soup = BeautifulSoup(item_info, 'html.parser')\n    item_info_text = soup.get_text()\n    birthday = \"生日潮流包\" in item_info_text\n\n    # 📌 确定竞价类型\n    bid_type = get_seat_type(title_name)\n\n    # 📌 根据剧场和商品类型选择相应的竞价数量\n    if \"SNH\" in theater_name and \"星梦剧院\" in title_name and \"MINILIVE\" not in title_name:\n        bid_number = get_bid_number_SNH(bid_type, driver)\n        if birthday:\n            theater_name = \"SNHbirthday\"\n\n    elif \"SNH\" in theater_name and \"星梦空间\" in title_name and \"MINILIVE\" not in title_name:\n        bid_number = get_bid_number_HGH(bid_type)\n        theater_name = \"HGH\"\n\n    elif \"BEJ\" in theater_name and \"生日会\" not in title_name:\n        bid_number = get_bid_number_BEJ(driver)\n\n    elif \"MINILIVE\" in title_name:\n        bid_number = get_bid_number_MiniLive(driver)\n        theater_name = \"MINILIVE\"\n\n    elif \"拍立得\" in title_name:\n        bid_number = get_bid_number_pld(driver)\n        theater_name = \"拍立得\"\n\n    elif \"生日会\" in title_name:\n        bid_number = get_bid_number_birthparty(driver, theater_name)\n        theater_name = \"生日会\"\n\n    print(f\"🎫 竞价席位总数：{bid_number}\")\n\n    # 📌 竞价流程\n    if bid_number != 0:\n        max_bid_num = bid_number\n        total_bids_data = auto_bid_until_end(driver, max_bid_num, bid_type, theater_name)\n\n        # 📌 获取商品 ID 并保存 Excel 数据\n        item_id = get_item_name(driver)\n        save_excel(total_bids_data, item_id, excel_name)\n\n    # 📌 刷新页面，准备下一次操作\n    driver.refresh()\n```\n\n### 📊 **3.保存竞价数据到 Excel**\n\n#### 📌 **函数：`save_excel`**\n此函数用于将竞价成功的数据保存到 Excel 文件，支持写入商品名称、表头、竞价信息，并更新统计信息（最小/最大出价、最早/最晚出价等）。\n\n##### 📜 **代码实现**\n```python\ndef save_excel(successful_bids_data, item_name, output_file=\"bidding_results.xlsx\"):\n    \"\"\"\n    将竞价成功数据保存到 Excel 文件。\n\n    :param successful_bids_data: 竞价成功的数据列表\n    :param item_name: 商品名称\n    :param output_file: 输出文件名（默认：\"bidding_results.xlsx\"）\n    \"\"\"\n\n    # 📌 将数据转换为 Pandas DataFrame\n    df = pd.DataFrame(successful_bids_data)\n    \n    # 📌 创建 Excel 工作簿和工作表\n    wb = Workbook()\n    ws = wb.active\n    ws.title = \"Bidding Results\"\n    \n    # 📌 在 Excel 文件的第一行写入商品名称\n    ws.append([item_name])\n    \n    # 📌 写入表头并加粗\n    header = [\"出价状态\", \"出价人\", \"出价时间\", \"出价金额\", \"座位类型\", \"座位号\"]\n    ws.append(header)\n    \n    for cell in ws[2]:  # 第二行是标题行\n        cell.font = Font(bold=True)\n    \n    # 📌 将竞价数据写入 Excel\n    for row in dataframe_to_rows(df, index=False, header=False):\n        ws.append(row)\n    \n    # 📌 更新最小/最大出价、最早/最晚出价的出价人信息\n    ws = update_min_max_info(df, ws)\n\n    # 📌 保存 Excel 文件\n    wb.save(output_file + \".xlsx\")\n    print(f\"✅ 竞价成功信息已保存至 {output_file}.xlsx\")\n```\n\n\n\n","slug":"pythonProgram","published":1,"updated":"2025-03-10T07:30:25.594Z","comments":1,"layout":"post","photos":[],"_id":"cmclckrns000110u713p3a93n","content":"<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>本系统仅适用于丝芭商城，其他商城请自行修改代码。<br>本系统爬虫仅用于学习交流，请勿用于非法用途。</p>\n</div>\n<h1 id=\"丝芭商城数据导出工具\"><a href=\"#丝芭商城数据导出工具\" class=\"headerlink\" title=\"丝芭商城数据导出工具\"></a>丝芭商城数据导出工具</h1><h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>本项目是一个用于 <strong>自动化抓取和导出丝芭商城（<a href=\"https://shop.48.cn)拍卖数据/\">https://shop.48.cn）拍卖数据</a></strong> 的 Python 工具。<br>用户可以获取 <strong>指定拍卖页面</strong> 的信息，并将其整理后导出为 <strong>Excel 文件</strong>。  </p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li><strong>自动获取拍卖数据</strong>：解析商品详情页，提取关键信息，如竞拍价格、出价记录等。  </li>\n<li><strong>数据存储</strong>：将抓取的数据存入 Excel，方便后续分析。  </li>\n<li><strong>Tampermonkey 脚本支持</strong>：支持在浏览器中使用 Tampermonkey 直接获取数据。  </li>\n<li><strong>多线程优化</strong>：提升请求效率，减少等待时间。  </li>\n<li><strong>防反爬策略</strong>：加入请求间隔控制，降低被封风险。</li>\n</ul>\n<h2 id=\"代码主要实现部分\"><a href=\"#代码主要实现部分\" class=\"headerlink\" title=\"代码主要实现部分\"></a>代码主要实现部分</h2><h3 id=\"🎯-1-获取竞价成功与失败数据\"><a href=\"#🎯-1-获取竞价成功与失败数据\" class=\"headerlink\" title=\"🎯 1.获取竞价成功与失败数据\"></a>🎯 <strong>1.获取竞价成功与失败数据</strong></h3><h4 id=\"📌-函数：auto-bid-until-end\"><a href=\"#📌-函数：auto-bid-until-end\" class=\"headerlink\" title=\"📌 函数：auto_bid_until_end\"></a>📌 <strong>函数：<code>auto_bid_until_end</code></strong></h4><p>此函数用于自动执行竞价过程，直到达到指定的成功竞价数量，并收集所有竞价数据，包括成功和失败的竞价信息。  </p>\n<h5 id=\"📌-函数参数\"><a href=\"#📌-函数参数\" class=\"headerlink\" title=\"📌 函数参数\"></a>📌 <strong>函数参数</strong></h5><ul>\n<li><code>driver</code>：WebDriver 实例，用于与网页交互。  </li>\n<li><code>target_successful_count</code>：目标成功竞价的数量。  </li>\n<li><code>bid_type</code>：竞价类型（座位类别）。  </li>\n<li><code>theater_name</code>：剧院名称。</li>\n</ul>\n<h5 id=\"📜-代码实现\"><a href=\"#📜-代码实现\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">auto_bid_until_end</span>(<span class=\"params\">driver, target_successful_count, bid_type, theater_name</span>):</span><br><span class=\"line\">    successful_bids_data = []  <span class=\"comment\"># 存储所有成功竞价信息</span></span><br><span class=\"line\">    unsuccessful_bids_data = []  <span class=\"comment\"># 存储所有未成功竞价信息</span></span><br><span class=\"line\">    total_bids_data = []</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取最大页数</span></span><br><span class=\"line\">    max_page_element = driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div[4]/span[3]&#x27;</span>)</span><br><span class=\"line\">    max_page = <span class=\"built_in\">int</span>(max_page_element.text)</span><br><span class=\"line\">    now_page = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 **获取成功竞价数据**</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> now_page &lt;= max_page:</span><br><span class=\"line\">        u_blist = driver.find_element(By.ID, <span class=\"string\">&quot;u_blist&quot;</span>)</span><br><span class=\"line\">        successful_bids_data.extend(parse_successful_bids(u_blist))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(successful_bids_data) &gt;= target_successful_count:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;✅ 已获取所有成功竞价信息&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查 `u_blistM` 是否存在额外的成功竞价信息</span></span><br><span class=\"line\">        u_blistM = driver.find_element(By.ID, <span class=\"string\">&quot;u_blistM&quot;</span>)</span><br><span class=\"line\">        successful_bids_data.extend(parse_successful_bids(u_blistM))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(successful_bids_data) &gt;= target_successful_count:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;✅ 已获取所有成功竞价信息&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 📌 **翻页**</span></span><br><span class=\"line\">        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;a_b_n&quot;]&#x27;</span>)))</span><br><span class=\"line\">        next_button.click()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;🔄 加载第 <span class=\"subst\">&#123;now_page&#125;</span> 页...&quot;</span>)</span><br><span class=\"line\">        now_page += <span class=\"number\">1</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 **获取未成功竞价数据**</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> now_page &lt;= max_page:</span><br><span class=\"line\">        u_blist = driver.find_element(By.ID, <span class=\"string\">&quot;u_blist&quot;</span>)</span><br><span class=\"line\">        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blist, successful_bids_data))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查 `u_blistM` 是否存在额外的未成功竞价信息</span></span><br><span class=\"line\">        u_blistM = driver.find_element(By.ID, <span class=\"string\">&quot;u_blistM&quot;</span>)</span><br><span class=\"line\">        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blistM, successful_bids_data))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 📌 **翻页**</span></span><br><span class=\"line\">        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;a_b_n&quot;]&#x27;</span>)))</span><br><span class=\"line\">        next_button.click()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;🔄 加载第 <span class=\"subst\">&#123;now_page&#125;</span> 页...&quot;</span>)</span><br><span class=\"line\">        now_page += <span class=\"number\">1</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># **去重处理**</span></span><br><span class=\"line\">    unsuccessful_bids_data = deduplication(unsuccessful_bids_data)</span><br><span class=\"line\">    total_bids_data = successful_bids_data + unsuccessful_bids_data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 **获取座位信息**</span></span><br><span class=\"line\">    seats = get_seat_positon(theater_name, bid_type, target_successful_count)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># **分配座位号**</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, bid <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(total_bids_data):</span><br><span class=\"line\">        bid[<span class=\"string\">&quot;座位类型&quot;</span>] = bid_type</span><br><span class=\"line\">        <span class=\"keyword\">if</span> idx &gt; <span class=\"built_in\">len</span>(seats) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            bid[<span class=\"string\">&quot;座位号&quot;</span>] = <span class=\"string\">&quot;竞价失败&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            bid[<span class=\"string\">&quot;座位号&quot;</span>] = seats[idx]  <span class=\"comment\"># 添加座位号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_bids_data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🎯-2-统计当前页面竞价数据前的准备活动\"><a href=\"#🎯-2-统计当前页面竞价数据前的准备活动\" class=\"headerlink\" title=\"🎯 2.统计当前页面竞价数据前的准备活动\"></a>🎯 <strong>2.统计当前页面竞价数据前的准备活动</strong></h3><h4 id=\"📌-函数：stats-one-good\"><a href=\"#📌-函数：stats-one-good\" class=\"headerlink\" title=\"📌 函数：stats_one_good\"></a>📌 <strong>函数：<code>stats_one_good</code></strong></h4><p>此函数用于获取丝芭商城的单页面下的竞价数据，并将其保存到 Excel 文件中。</p>\n<h5 id=\"📜-代码实现-1\"><a href=\"#📜-代码实现-1\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">stats_one_good</span>(<span class=\"params\">driver</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 📌 获取剧院名称和 Excel 文件名</span></span><br><span class=\"line\">    theater_name = driver.find_element(By.XPATH, <span class=\"string\">&quot;/html/body/div[2]/div/div[2]/div[2]/ul/li[2]/p&quot;</span>).text</span><br><span class=\"line\">    excel_name = driver.find_element(By.XPATH, <span class=\"string\">&quot;/html/body/div[2]/div/div[2]/div[2]/ul/li[1]&quot;</span>).text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 获取商品标题</span></span><br><span class=\"line\">    title_name_element = driver.find_element(By.CLASS_NAME, <span class=\"string\">&quot;i_tit&quot;</span>)</span><br><span class=\"line\">    title_name = title_name_element.text.strip()  <span class=\"comment\"># 获取文本内容并去除首尾空格</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 获取商品详细信息并判断是否为生日公演</span></span><br><span class=\"line\">    item_info = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;TabTab03Con1&quot;]&#x27;</span>).get_attribute(<span class=\"string\">&#x27;outerHTML&#x27;</span>)</span><br><span class=\"line\">    soup = BeautifulSoup(item_info, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\">    item_info_text = soup.get_text()</span><br><span class=\"line\">    birthday = <span class=\"string\">&quot;生日潮流包&quot;</span> <span class=\"keyword\">in</span> item_info_text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 确定竞价类型</span></span><br><span class=\"line\">    bid_type = get_seat_type(title_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 根据剧场和商品类型选择相应的竞价数量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;SNH&quot;</span> <span class=\"keyword\">in</span> theater_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;星梦剧院&quot;</span> <span class=\"keyword\">in</span> title_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;MINILIVE&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_SNH(bid_type, driver)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> birthday:</span><br><span class=\"line\">            theater_name = <span class=\"string\">&quot;SNHbirthday&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;SNH&quot;</span> <span class=\"keyword\">in</span> theater_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;星梦空间&quot;</span> <span class=\"keyword\">in</span> title_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;MINILIVE&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_HGH(bid_type)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;HGH&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;BEJ&quot;</span> <span class=\"keyword\">in</span> theater_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;生日会&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_BEJ(driver)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;MINILIVE&quot;</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_MiniLive(driver)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;MINILIVE&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;拍立得&quot;</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_pld(driver)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;拍立得&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;生日会&quot;</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_birthparty(driver, theater_name)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;生日会&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;🎫 竞价席位总数：<span class=\"subst\">&#123;bid_number&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 竞价流程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> bid_number != <span class=\"number\">0</span>:</span><br><span class=\"line\">        max_bid_num = bid_number</span><br><span class=\"line\">        total_bids_data = auto_bid_until_end(driver, max_bid_num, bid_type, theater_name)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 📌 获取商品 ID 并保存 Excel 数据</span></span><br><span class=\"line\">        item_id = get_item_name(driver)</span><br><span class=\"line\">        save_excel(total_bids_data, item_id, excel_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 刷新页面，准备下一次操作</span></span><br><span class=\"line\">    driver.refresh()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📊-3-保存竞价数据到-Excel\"><a href=\"#📊-3-保存竞价数据到-Excel\" class=\"headerlink\" title=\"📊 3.保存竞价数据到 Excel\"></a>📊 <strong>3.保存竞价数据到 Excel</strong></h3><h4 id=\"📌-函数：save-excel\"><a href=\"#📌-函数：save-excel\" class=\"headerlink\" title=\"📌 函数：save_excel\"></a>📌 <strong>函数：<code>save_excel</code></strong></h4><p>此函数用于将竞价成功的数据保存到 Excel 文件，支持写入商品名称、表头、竞价信息，并更新统计信息（最小&#x2F;最大出价、最早&#x2F;最晚出价等）。</p>\n<h5 id=\"📜-代码实现-2\"><a href=\"#📜-代码实现-2\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">save_excel</span>(<span class=\"params\">successful_bids_data, item_name, output_file=<span class=\"string\">&quot;bidding_results.xlsx&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    将竞价成功数据保存到 Excel 文件。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param successful_bids_data: 竞价成功的数据列表</span></span><br><span class=\"line\"><span class=\"string\">    :param item_name: 商品名称</span></span><br><span class=\"line\"><span class=\"string\">    :param output_file: 输出文件名（默认：&quot;bidding_results.xlsx&quot;）</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 将数据转换为 Pandas DataFrame</span></span><br><span class=\"line\">    df = pd.DataFrame(successful_bids_data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 创建 Excel 工作簿和工作表</span></span><br><span class=\"line\">    wb = Workbook()</span><br><span class=\"line\">    ws = wb.active</span><br><span class=\"line\">    ws.title = <span class=\"string\">&quot;Bidding Results&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 在 Excel 文件的第一行写入商品名称</span></span><br><span class=\"line\">    ws.append([item_name])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 写入表头并加粗</span></span><br><span class=\"line\">    header = [<span class=\"string\">&quot;出价状态&quot;</span>, <span class=\"string\">&quot;出价人&quot;</span>, <span class=\"string\">&quot;出价时间&quot;</span>, <span class=\"string\">&quot;出价金额&quot;</span>, <span class=\"string\">&quot;座位类型&quot;</span>, <span class=\"string\">&quot;座位号&quot;</span>]</span><br><span class=\"line\">    ws.append(header)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> cell <span class=\"keyword\">in</span> ws[<span class=\"number\">2</span>]:  <span class=\"comment\"># 第二行是标题行</span></span><br><span class=\"line\">        cell.font = Font(bold=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 将竞价数据写入 Excel</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> dataframe_to_rows(df, index=<span class=\"literal\">False</span>, header=<span class=\"literal\">False</span>):</span><br><span class=\"line\">        ws.append(row)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 更新最小/最大出价、最早/最晚出价的出价人信息</span></span><br><span class=\"line\">    ws = update_min_max_info(df, ws)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 保存 Excel 文件</span></span><br><span class=\"line\">    wb.save(output_file + <span class=\"string\">&quot;.xlsx&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;✅ 竞价成功信息已保存至 <span class=\"subst\">&#123;output_file&#125;</span>.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"","more":"<p>:::warning<br>本系统仅适用于丝芭商城，其他商城请自行修改代码。<br>本系统爬虫仅用于学习交流，请勿用于非法用途。<br>:::</p>\n<h1 id=\"丝芭商城数据导出工具\"><a href=\"#丝芭商城数据导出工具\" class=\"headerlink\" title=\"丝芭商城数据导出工具\"></a>丝芭商城数据导出工具</h1><h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>本项目是一个用于 <strong>自动化抓取和导出丝芭商城（<a href=\"https://shop.48.cn)拍卖数据/\">https://shop.48.cn）拍卖数据</a></strong> 的 Python 工具。<br>用户可以获取 <strong>指定拍卖页面</strong> 的信息，并将其整理后导出为 <strong>Excel 文件</strong>。  </p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li><strong>自动获取拍卖数据</strong>：解析商品详情页，提取关键信息，如竞拍价格、出价记录等。  </li>\n<li><strong>数据存储</strong>：将抓取的数据存入 Excel，方便后续分析。  </li>\n<li><strong>Tampermonkey 脚本支持</strong>：支持在浏览器中使用 Tampermonkey 直接获取数据。  </li>\n<li><strong>多线程优化</strong>：提升请求效率，减少等待时间。  </li>\n<li><strong>防反爬策略</strong>：加入请求间隔控制，降低被封风险。</li>\n</ul>\n<h2 id=\"代码主要实现部分\"><a href=\"#代码主要实现部分\" class=\"headerlink\" title=\"代码主要实现部分\"></a>代码主要实现部分</h2><h3 id=\"🎯-1-获取竞价成功与失败数据\"><a href=\"#🎯-1-获取竞价成功与失败数据\" class=\"headerlink\" title=\"🎯 1.获取竞价成功与失败数据\"></a>🎯 <strong>1.获取竞价成功与失败数据</strong></h3><h4 id=\"📌-函数：auto-bid-until-end\"><a href=\"#📌-函数：auto-bid-until-end\" class=\"headerlink\" title=\"📌 函数：auto_bid_until_end\"></a>📌 <strong>函数：<code>auto_bid_until_end</code></strong></h4><p>此函数用于自动执行竞价过程，直到达到指定的成功竞价数量，并收集所有竞价数据，包括成功和失败的竞价信息。  </p>\n<h5 id=\"📌-函数参数\"><a href=\"#📌-函数参数\" class=\"headerlink\" title=\"📌 函数参数\"></a>📌 <strong>函数参数</strong></h5><ul>\n<li><code>driver</code>：WebDriver 实例，用于与网页交互。  </li>\n<li><code>target_successful_count</code>：目标成功竞价的数量。  </li>\n<li><code>bid_type</code>：竞价类型（座位类别）。  </li>\n<li><code>theater_name</code>：剧院名称。</li>\n</ul>\n<h5 id=\"📜-代码实现\"><a href=\"#📜-代码实现\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">auto_bid_until_end</span>(<span class=\"params\">driver, target_successful_count, bid_type, theater_name</span>):</span><br><span class=\"line\">    successful_bids_data = []  <span class=\"comment\"># 存储所有成功竞价信息</span></span><br><span class=\"line\">    unsuccessful_bids_data = []  <span class=\"comment\"># 存储所有未成功竞价信息</span></span><br><span class=\"line\">    total_bids_data = []</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取最大页数</span></span><br><span class=\"line\">    max_page_element = driver.find_element(By.XPATH, <span class=\"string\">&#x27;/html/body/div[2]/div/div[3]/div[3]/div[2]/div[2]/div[4]/span[3]&#x27;</span>)</span><br><span class=\"line\">    max_page = <span class=\"built_in\">int</span>(max_page_element.text)</span><br><span class=\"line\">    now_page = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 **获取成功竞价数据**</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> now_page &lt;= max_page:</span><br><span class=\"line\">        u_blist = driver.find_element(By.ID, <span class=\"string\">&quot;u_blist&quot;</span>)</span><br><span class=\"line\">        successful_bids_data.extend(parse_successful_bids(u_blist))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(successful_bids_data) &gt;= target_successful_count:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;✅ 已获取所有成功竞价信息&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查 `u_blistM` 是否存在额外的成功竞价信息</span></span><br><span class=\"line\">        u_blistM = driver.find_element(By.ID, <span class=\"string\">&quot;u_blistM&quot;</span>)</span><br><span class=\"line\">        successful_bids_data.extend(parse_successful_bids(u_blistM))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(successful_bids_data) &gt;= target_successful_count:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;✅ 已获取所有成功竞价信息&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 📌 **翻页**</span></span><br><span class=\"line\">        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;a_b_n&quot;]&#x27;</span>)))</span><br><span class=\"line\">        next_button.click()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;🔄 加载第 <span class=\"subst\">&#123;now_page&#125;</span> 页...&quot;</span>)</span><br><span class=\"line\">        now_page += <span class=\"number\">1</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 **获取未成功竞价数据**</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> now_page &lt;= max_page:</span><br><span class=\"line\">        u_blist = driver.find_element(By.ID, <span class=\"string\">&quot;u_blist&quot;</span>)</span><br><span class=\"line\">        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blist, successful_bids_data))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查 `u_blistM` 是否存在额外的未成功竞价信息</span></span><br><span class=\"line\">        u_blistM = driver.find_element(By.ID, <span class=\"string\">&quot;u_blistM&quot;</span>)</span><br><span class=\"line\">        unsuccessful_bids_data.extend(parse_unsuccessful_bids(u_blistM, successful_bids_data))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 📌 **翻页**</span></span><br><span class=\"line\">        next_button = wait.until(EC.element_to_be_clickable((By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;a_b_n&quot;]&#x27;</span>)))</span><br><span class=\"line\">        next_button.click()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;🔄 加载第 <span class=\"subst\">&#123;now_page&#125;</span> 页...&quot;</span>)</span><br><span class=\"line\">        now_page += <span class=\"number\">1</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># **去重处理**</span></span><br><span class=\"line\">    unsuccessful_bids_data = deduplication(unsuccessful_bids_data)</span><br><span class=\"line\">    total_bids_data = successful_bids_data + unsuccessful_bids_data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 **获取座位信息**</span></span><br><span class=\"line\">    seats = get_seat_positon(theater_name, bid_type, target_successful_count)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># **分配座位号**</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, bid <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(total_bids_data):</span><br><span class=\"line\">        bid[<span class=\"string\">&quot;座位类型&quot;</span>] = bid_type</span><br><span class=\"line\">        <span class=\"keyword\">if</span> idx &gt; <span class=\"built_in\">len</span>(seats) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            bid[<span class=\"string\">&quot;座位号&quot;</span>] = <span class=\"string\">&quot;竞价失败&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            bid[<span class=\"string\">&quot;座位号&quot;</span>] = seats[idx]  <span class=\"comment\"># 添加座位号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_bids_data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🎯-2-统计当前页面竞价数据前的准备活动\"><a href=\"#🎯-2-统计当前页面竞价数据前的准备活动\" class=\"headerlink\" title=\"🎯 2.统计当前页面竞价数据前的准备活动\"></a>🎯 <strong>2.统计当前页面竞价数据前的准备活动</strong></h3><h4 id=\"📌-函数：stats-one-good\"><a href=\"#📌-函数：stats-one-good\" class=\"headerlink\" title=\"📌 函数：stats_one_good\"></a>📌 <strong>函数：<code>stats_one_good</code></strong></h4><p>此函数用于获取丝芭商城的单页面下的竞价数据，并将其保存到 Excel 文件中。</p>\n<h5 id=\"📜-代码实现-1\"><a href=\"#📜-代码实现-1\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">stats_one_good</span>(<span class=\"params\">driver</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 📌 获取剧院名称和 Excel 文件名</span></span><br><span class=\"line\">    theater_name = driver.find_element(By.XPATH, <span class=\"string\">&quot;/html/body/div[2]/div/div[2]/div[2]/ul/li[2]/p&quot;</span>).text</span><br><span class=\"line\">    excel_name = driver.find_element(By.XPATH, <span class=\"string\">&quot;/html/body/div[2]/div/div[2]/div[2]/ul/li[1]&quot;</span>).text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 获取商品标题</span></span><br><span class=\"line\">    title_name_element = driver.find_element(By.CLASS_NAME, <span class=\"string\">&quot;i_tit&quot;</span>)</span><br><span class=\"line\">    title_name = title_name_element.text.strip()  <span class=\"comment\"># 获取文本内容并去除首尾空格</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 获取商品详细信息并判断是否为生日公演</span></span><br><span class=\"line\">    item_info = driver.find_element(By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;TabTab03Con1&quot;]&#x27;</span>).get_attribute(<span class=\"string\">&#x27;outerHTML&#x27;</span>)</span><br><span class=\"line\">    soup = BeautifulSoup(item_info, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\">    item_info_text = soup.get_text()</span><br><span class=\"line\">    birthday = <span class=\"string\">&quot;生日潮流包&quot;</span> <span class=\"keyword\">in</span> item_info_text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 确定竞价类型</span></span><br><span class=\"line\">    bid_type = get_seat_type(title_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 根据剧场和商品类型选择相应的竞价数量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;SNH&quot;</span> <span class=\"keyword\">in</span> theater_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;星梦剧院&quot;</span> <span class=\"keyword\">in</span> title_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;MINILIVE&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_SNH(bid_type, driver)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> birthday:</span><br><span class=\"line\">            theater_name = <span class=\"string\">&quot;SNHbirthday&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;SNH&quot;</span> <span class=\"keyword\">in</span> theater_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;星梦空间&quot;</span> <span class=\"keyword\">in</span> title_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;MINILIVE&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_HGH(bid_type)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;HGH&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;BEJ&quot;</span> <span class=\"keyword\">in</span> theater_name <span class=\"keyword\">and</span> <span class=\"string\">&quot;生日会&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_BEJ(driver)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;MINILIVE&quot;</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_MiniLive(driver)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;MINILIVE&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;拍立得&quot;</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_pld(driver)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;拍立得&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"string\">&quot;生日会&quot;</span> <span class=\"keyword\">in</span> title_name:</span><br><span class=\"line\">        bid_number = get_bid_number_birthparty(driver, theater_name)</span><br><span class=\"line\">        theater_name = <span class=\"string\">&quot;生日会&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;🎫 竞价席位总数：<span class=\"subst\">&#123;bid_number&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 竞价流程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> bid_number != <span class=\"number\">0</span>:</span><br><span class=\"line\">        max_bid_num = bid_number</span><br><span class=\"line\">        total_bids_data = auto_bid_until_end(driver, max_bid_num, bid_type, theater_name)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 📌 获取商品 ID 并保存 Excel 数据</span></span><br><span class=\"line\">        item_id = get_item_name(driver)</span><br><span class=\"line\">        save_excel(total_bids_data, item_id, excel_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 刷新页面，准备下一次操作</span></span><br><span class=\"line\">    driver.refresh()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📊-3-保存竞价数据到-Excel\"><a href=\"#📊-3-保存竞价数据到-Excel\" class=\"headerlink\" title=\"📊 3.保存竞价数据到 Excel\"></a>📊 <strong>3.保存竞价数据到 Excel</strong></h3><h4 id=\"📌-函数：save-excel\"><a href=\"#📌-函数：save-excel\" class=\"headerlink\" title=\"📌 函数：save_excel\"></a>📌 <strong>函数：<code>save_excel</code></strong></h4><p>此函数用于将竞价成功的数据保存到 Excel 文件，支持写入商品名称、表头、竞价信息，并更新统计信息（最小&#x2F;最大出价、最早&#x2F;最晚出价等）。</p>\n<h5 id=\"📜-代码实现-2\"><a href=\"#📜-代码实现-2\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">save_excel</span>(<span class=\"params\">successful_bids_data, item_name, output_file=<span class=\"string\">&quot;bidding_results.xlsx&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    将竞价成功数据保存到 Excel 文件。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param successful_bids_data: 竞价成功的数据列表</span></span><br><span class=\"line\"><span class=\"string\">    :param item_name: 商品名称</span></span><br><span class=\"line\"><span class=\"string\">    :param output_file: 输出文件名（默认：&quot;bidding_results.xlsx&quot;）</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 将数据转换为 Pandas DataFrame</span></span><br><span class=\"line\">    df = pd.DataFrame(successful_bids_data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 创建 Excel 工作簿和工作表</span></span><br><span class=\"line\">    wb = Workbook()</span><br><span class=\"line\">    ws = wb.active</span><br><span class=\"line\">    ws.title = <span class=\"string\">&quot;Bidding Results&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 在 Excel 文件的第一行写入商品名称</span></span><br><span class=\"line\">    ws.append([item_name])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 写入表头并加粗</span></span><br><span class=\"line\">    header = [<span class=\"string\">&quot;出价状态&quot;</span>, <span class=\"string\">&quot;出价人&quot;</span>, <span class=\"string\">&quot;出价时间&quot;</span>, <span class=\"string\">&quot;出价金额&quot;</span>, <span class=\"string\">&quot;座位类型&quot;</span>, <span class=\"string\">&quot;座位号&quot;</span>]</span><br><span class=\"line\">    ws.append(header)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> cell <span class=\"keyword\">in</span> ws[<span class=\"number\">2</span>]:  <span class=\"comment\"># 第二行是标题行</span></span><br><span class=\"line\">        cell.font = Font(bold=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 将竞价数据写入 Excel</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> dataframe_to_rows(df, index=<span class=\"literal\">False</span>, header=<span class=\"literal\">False</span>):</span><br><span class=\"line\">        ws.append(row)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 📌 更新最小/最大出价、最早/最晚出价的出价人信息</span></span><br><span class=\"line\">    ws = update_min_max_info(df, ws)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 📌 保存 Excel 文件</span></span><br><span class=\"line\">    wb.save(output_file + <span class=\"string\">&quot;.xlsx&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;✅ 竞价成功信息已保存至 <span class=\"subst\">&#123;output_file&#125;</span>.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"丝芭商城切票","date":"2025-06-10T08:00:00.000Z","abstracts":"切票","cover":"./images/ticketPlayWright.jpg","_content":"\n:::warning\n本系统仅适用于丝芭商城，未测试，不保证可行性，重点介绍playwright。\n本系统爬虫仅用于学习交流，请勿用于非法用途。\n:::\n\n# 丝芭商城门票抢购\n\n## 项目简介  \n本项目旨在使用playwright技术 **自动化购买丝芭公演门票** 。  \n\n## 功能介绍  \n- **自动购买门票**：调用购买api接口，实现自动化购买。  \n- **playwright 支持**：相比于selenium，playwright 更加适合自动化测试，速度更快，更稳定。  \n- **多线程优化**：提升请求效率，减少等待时间。  \n- **防反爬策略**：加入请求间隔控制，降低被封风险。 \n\n## 代码主要实现部分  \n\n### 🎯 **1.playwright安装**\n\n##### 📜 **代码实现** \n\n```cmd\n# 安装playwright\npip install playwright\n\n# 安装playwright所需的浏览器插件\nplaywright install\n```\n\n### 🎯 **2.playwright启动浏览器**\n\n##### 📜 **代码实现**  \n\n```python\nasync with async_playwright() as p:\n    # 以无头模式运行 可更换启动的浏览器\n    browser = await p.chromium.launch(executable_path=\".\\ms-playwright\\chromium-1169\\chrome-win\\chrome.exe\", headless=False)\n    context = await browser.new_context()\n    page = await context.new_page()\n    try:\n        # ✅ 用于 API 请求的独立 context\n        api_context = await p.request.new_context()\n        ###  页面操作代码\n\n        ###  页面操作代码\n\n        await asyncio.sleep(60)  # 保持页面一段时间，便于观察\n        await browser.close()\n\n\n    except Exception as e:\n        print(\"异常或浏览器关闭:\", e)\n    finally:\n        await browser.close()\n```\n\n### 🎯 **3.playwright调用购票接口**\n\n#### 📌 **函数：`make_request_with_retries`**\n此函数用于调用购票api，直到成功/没有库存，并将返回的信息保存成日志，并返回日志信息。  \n\n##### 📌 **函数参数**  \n- `context: APIRequestContext`：必须为APIRequestContext类型，其他类型没有get/post方法。  \n- `ticket_Add_url`：购票url。  \n- `ticket_Add_params`：接口传参。  \n- `ticket_Add_headers`：请求头。\n\n##### 📜 **代码实现**  \n\n```python\nasync with async_playwright(context: APIRequestContext, ticket_Add_url, ticket_Add_params, ticket_Add_headers) as p:\n    retries = 0\n    backoff = 0.2\n    while retries < max_retries:\n        try:\n            response = await context.post(ticket_Add_url, params=ticket_Add_params, headers=ticket_Add_headers)\n            current_time = datetime.now()\n            if response.ok:\n                data = await response.json()\n                if 'success' in data.get(\"Message\", \"\"):\n                    log_entry = f\"数据={data}\"\n                    log_data.append(log_entry)\n                    return log_data\n                else:\n                    log_entry = f\"数据={data}\"\n                    log_data.append(log_entry)\n                    retries += 1\n                    delay = backoff * (2 ** retries) + random.random()*0.1\n                    await asyncio.sleep(delay)\n            else:\n                error_entry = f\"状态码: {response.status}\"\n                log_data.append(error_entry)\n                retries += 1\n                delay = backoff * (2 ** retries) + random.random()*0.1\n                await asyncio.sleep(delay)\n        except Exception as e:\n            error_entry = f\"{e}\"\n            log_data.append(error_entry)\n            retries += 1\n            delay = backoff * (2 ** retries) + random.random()*0.1\n            await asyncio.sleep(delay)\n    return log_data\n```","source":"_posts/ticketPlayWright.md","raw":"---\ntitle: 丝芭商城切票\ndate: 2025-06-10 16:00:00\nabstracts: 切票\ntags: [python,爬虫,playwright]\ncover: ./images/ticketPlayWright.jpg\n---\n\n:::warning\n本系统仅适用于丝芭商城，未测试，不保证可行性，重点介绍playwright。\n本系统爬虫仅用于学习交流，请勿用于非法用途。\n:::\n\n# 丝芭商城门票抢购\n\n## 项目简介  \n本项目旨在使用playwright技术 **自动化购买丝芭公演门票** 。  \n\n## 功能介绍  \n- **自动购买门票**：调用购买api接口，实现自动化购买。  \n- **playwright 支持**：相比于selenium，playwright 更加适合自动化测试，速度更快，更稳定。  \n- **多线程优化**：提升请求效率，减少等待时间。  \n- **防反爬策略**：加入请求间隔控制，降低被封风险。 \n\n## 代码主要实现部分  \n\n### 🎯 **1.playwright安装**\n\n##### 📜 **代码实现** \n\n```cmd\n# 安装playwright\npip install playwright\n\n# 安装playwright所需的浏览器插件\nplaywright install\n```\n\n### 🎯 **2.playwright启动浏览器**\n\n##### 📜 **代码实现**  \n\n```python\nasync with async_playwright() as p:\n    # 以无头模式运行 可更换启动的浏览器\n    browser = await p.chromium.launch(executable_path=\".\\ms-playwright\\chromium-1169\\chrome-win\\chrome.exe\", headless=False)\n    context = await browser.new_context()\n    page = await context.new_page()\n    try:\n        # ✅ 用于 API 请求的独立 context\n        api_context = await p.request.new_context()\n        ###  页面操作代码\n\n        ###  页面操作代码\n\n        await asyncio.sleep(60)  # 保持页面一段时间，便于观察\n        await browser.close()\n\n\n    except Exception as e:\n        print(\"异常或浏览器关闭:\", e)\n    finally:\n        await browser.close()\n```\n\n### 🎯 **3.playwright调用购票接口**\n\n#### 📌 **函数：`make_request_with_retries`**\n此函数用于调用购票api，直到成功/没有库存，并将返回的信息保存成日志，并返回日志信息。  \n\n##### 📌 **函数参数**  \n- `context: APIRequestContext`：必须为APIRequestContext类型，其他类型没有get/post方法。  \n- `ticket_Add_url`：购票url。  \n- `ticket_Add_params`：接口传参。  \n- `ticket_Add_headers`：请求头。\n\n##### 📜 **代码实现**  \n\n```python\nasync with async_playwright(context: APIRequestContext, ticket_Add_url, ticket_Add_params, ticket_Add_headers) as p:\n    retries = 0\n    backoff = 0.2\n    while retries < max_retries:\n        try:\n            response = await context.post(ticket_Add_url, params=ticket_Add_params, headers=ticket_Add_headers)\n            current_time = datetime.now()\n            if response.ok:\n                data = await response.json()\n                if 'success' in data.get(\"Message\", \"\"):\n                    log_entry = f\"数据={data}\"\n                    log_data.append(log_entry)\n                    return log_data\n                else:\n                    log_entry = f\"数据={data}\"\n                    log_data.append(log_entry)\n                    retries += 1\n                    delay = backoff * (2 ** retries) + random.random()*0.1\n                    await asyncio.sleep(delay)\n            else:\n                error_entry = f\"状态码: {response.status}\"\n                log_data.append(error_entry)\n                retries += 1\n                delay = backoff * (2 ** retries) + random.random()*0.1\n                await asyncio.sleep(delay)\n        except Exception as e:\n            error_entry = f\"{e}\"\n            log_data.append(error_entry)\n            retries += 1\n            delay = backoff * (2 ** retries) + random.random()*0.1\n            await asyncio.sleep(delay)\n    return log_data\n```","slug":"ticketPlayWright","published":1,"updated":"2025-06-10T09:33:29.327Z","comments":1,"layout":"post","photos":[],"_id":"cmclckrnz000610u7axai7gkg","content":"<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>本系统仅适用于丝芭商城，未测试，不保证可行性，重点介绍playwright。<br>本系统爬虫仅用于学习交流，请勿用于非法用途。</p>\n</div>\n<h1 id=\"丝芭商城门票抢购\"><a href=\"#丝芭商城门票抢购\" class=\"headerlink\" title=\"丝芭商城门票抢购\"></a>丝芭商城门票抢购</h1><h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>本项目旨在使用playwright技术 <strong>自动化购买丝芭公演门票</strong> 。  </p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li><strong>自动购买门票</strong>：调用购买api接口，实现自动化购买。  </li>\n<li><strong>playwright 支持</strong>：相比于selenium，playwright 更加适合自动化测试，速度更快，更稳定。  </li>\n<li><strong>多线程优化</strong>：提升请求效率，减少等待时间。  </li>\n<li><strong>防反爬策略</strong>：加入请求间隔控制，降低被封风险。</li>\n</ul>\n<h2 id=\"代码主要实现部分\"><a href=\"#代码主要实现部分\" class=\"headerlink\" title=\"代码主要实现部分\"></a>代码主要实现部分</h2><h3 id=\"🎯-1-playwright安装\"><a href=\"#🎯-1-playwright安装\" class=\"headerlink\" title=\"🎯 1.playwright安装\"></a>🎯 <strong>1.playwright安装</strong></h3><h5 id=\"📜-代码实现\"><a href=\"#📜-代码实现\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装playwright</span><br><span class=\"line\">pip install playwright</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装playwright所需的浏览器插件</span><br><span class=\"line\">playwright install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🎯-2-playwright启动浏览器\"><a href=\"#🎯-2-playwright启动浏览器\" class=\"headerlink\" title=\"🎯 2.playwright启动浏览器\"></a>🎯 <strong>2.playwright启动浏览器</strong></h3><h5 id=\"📜-代码实现-1\"><a href=\"#📜-代码实现-1\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">with</span> async_playwright() <span class=\"keyword\">as</span> p:</span><br><span class=\"line\">    <span class=\"comment\"># 以无头模式运行 可更换启动的浏览器</span></span><br><span class=\"line\">    browser = <span class=\"keyword\">await</span> p.chromium.launch(executable_path=<span class=\"string\">&quot;.\\ms-playwright\\chromium-1169\\chrome-win\\chrome.exe&quot;</span>, headless=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    context = <span class=\"keyword\">await</span> browser.new_context()</span><br><span class=\"line\">    page = <span class=\"keyword\">await</span> context.new_page()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># ✅ 用于 API 请求的独立 context</span></span><br><span class=\"line\">        api_context = <span class=\"keyword\">await</span> p.request.new_context()</span><br><span class=\"line\">        <span class=\"comment\">###  页面操作代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">###  页面操作代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">60</span>)  <span class=\"comment\"># 保持页面一段时间，便于观察</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> browser.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;异常或浏览器关闭:&quot;</span>, e)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> browser.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🎯-3-playwright调用购票接口\"><a href=\"#🎯-3-playwright调用购票接口\" class=\"headerlink\" title=\"🎯 3.playwright调用购票接口\"></a>🎯 <strong>3.playwright调用购票接口</strong></h3><h4 id=\"📌-函数：make-request-with-retries\"><a href=\"#📌-函数：make-request-with-retries\" class=\"headerlink\" title=\"📌 函数：make_request_with_retries\"></a>📌 <strong>函数：<code>make_request_with_retries</code></strong></h4><p>此函数用于调用购票api，直到成功&#x2F;没有库存，并将返回的信息保存成日志，并返回日志信息。  </p>\n<h5 id=\"📌-函数参数\"><a href=\"#📌-函数参数\" class=\"headerlink\" title=\"📌 函数参数\"></a>📌 <strong>函数参数</strong></h5><ul>\n<li><code>context: APIRequestContext</code>：必须为APIRequestContext类型，其他类型没有get&#x2F;post方法。  </li>\n<li><code>ticket_Add_url</code>：购票url。  </li>\n<li><code>ticket_Add_params</code>：接口传参。  </li>\n<li><code>ticket_Add_headers</code>：请求头。</li>\n</ul>\n<h5 id=\"📜-代码实现-2\"><a href=\"#📜-代码实现-2\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">with</span> async_playwright(context: APIRequestContext, ticket_Add_url, ticket_Add_params, ticket_Add_headers) <span class=\"keyword\">as</span> p:</span><br><span class=\"line\">    retries = <span class=\"number\">0</span></span><br><span class=\"line\">    backoff = <span class=\"number\">0.2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> retries &lt; max_retries:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> context.post(ticket_Add_url, params=ticket_Add_params, headers=ticket_Add_headers)</span><br><span class=\"line\">            current_time = datetime.now()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.ok:</span><br><span class=\"line\">                data = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">&#x27;success&#x27;</span> <span class=\"keyword\">in</span> data.get(<span class=\"string\">&quot;Message&quot;</span>, <span class=\"string\">&quot;&quot;</span>):</span><br><span class=\"line\">                    log_entry = <span class=\"string\">f&quot;数据=<span class=\"subst\">&#123;data&#125;</span>&quot;</span></span><br><span class=\"line\">                    log_data.append(log_entry)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> log_data</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    log_entry = <span class=\"string\">f&quot;数据=<span class=\"subst\">&#123;data&#125;</span>&quot;</span></span><br><span class=\"line\">                    log_data.append(log_entry)</span><br><span class=\"line\">                    retries += <span class=\"number\">1</span></span><br><span class=\"line\">                    delay = backoff * (<span class=\"number\">2</span> ** retries) + random.random()*<span class=\"number\">0.1</span></span><br><span class=\"line\">                    <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                error_entry = <span class=\"string\">f&quot;状态码: <span class=\"subst\">&#123;response.status&#125;</span>&quot;</span></span><br><span class=\"line\">                log_data.append(error_entry)</span><br><span class=\"line\">                retries += <span class=\"number\">1</span></span><br><span class=\"line\">                delay = backoff * (<span class=\"number\">2</span> ** retries) + random.random()*<span class=\"number\">0.1</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            error_entry = <span class=\"string\">f&quot;<span class=\"subst\">&#123;e&#125;</span>&quot;</span></span><br><span class=\"line\">            log_data.append(error_entry)</span><br><span class=\"line\">            retries += <span class=\"number\">1</span></span><br><span class=\"line\">            delay = backoff * (<span class=\"number\">2</span> ** retries) + random.random()*<span class=\"number\">0.1</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> log_data</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>:::warning<br>本系统仅适用于丝芭商城，未测试，不保证可行性，重点介绍playwright。<br>本系统爬虫仅用于学习交流，请勿用于非法用途。<br>:::</p>\n<h1 id=\"丝芭商城门票抢购\"><a href=\"#丝芭商城门票抢购\" class=\"headerlink\" title=\"丝芭商城门票抢购\"></a>丝芭商城门票抢购</h1><h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>本项目旨在使用playwright技术 <strong>自动化购买丝芭公演门票</strong> 。  </p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li><strong>自动购买门票</strong>：调用购买api接口，实现自动化购买。  </li>\n<li><strong>playwright 支持</strong>：相比于selenium，playwright 更加适合自动化测试，速度更快，更稳定。  </li>\n<li><strong>多线程优化</strong>：提升请求效率，减少等待时间。  </li>\n<li><strong>防反爬策略</strong>：加入请求间隔控制，降低被封风险。</li>\n</ul>\n<h2 id=\"代码主要实现部分\"><a href=\"#代码主要实现部分\" class=\"headerlink\" title=\"代码主要实现部分\"></a>代码主要实现部分</h2><h3 id=\"🎯-1-playwright安装\"><a href=\"#🎯-1-playwright安装\" class=\"headerlink\" title=\"🎯 1.playwright安装\"></a>🎯 <strong>1.playwright安装</strong></h3><h5 id=\"📜-代码实现\"><a href=\"#📜-代码实现\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装playwright</span><br><span class=\"line\">pip install playwright</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装playwright所需的浏览器插件</span><br><span class=\"line\">playwright install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🎯-2-playwright启动浏览器\"><a href=\"#🎯-2-playwright启动浏览器\" class=\"headerlink\" title=\"🎯 2.playwright启动浏览器\"></a>🎯 <strong>2.playwright启动浏览器</strong></h3><h5 id=\"📜-代码实现-1\"><a href=\"#📜-代码实现-1\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">with</span> async_playwright() <span class=\"keyword\">as</span> p:</span><br><span class=\"line\">    <span class=\"comment\"># 以无头模式运行 可更换启动的浏览器</span></span><br><span class=\"line\">    browser = <span class=\"keyword\">await</span> p.chromium.launch(executable_path=<span class=\"string\">&quot;.\\ms-playwright\\chromium-1169\\chrome-win\\chrome.exe&quot;</span>, headless=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    context = <span class=\"keyword\">await</span> browser.new_context()</span><br><span class=\"line\">    page = <span class=\"keyword\">await</span> context.new_page()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># ✅ 用于 API 请求的独立 context</span></span><br><span class=\"line\">        api_context = <span class=\"keyword\">await</span> p.request.new_context()</span><br><span class=\"line\">        <span class=\"comment\">###  页面操作代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">###  页面操作代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">60</span>)  <span class=\"comment\"># 保持页面一段时间，便于观察</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> browser.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;异常或浏览器关闭:&quot;</span>, e)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> browser.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🎯-3-playwright调用购票接口\"><a href=\"#🎯-3-playwright调用购票接口\" class=\"headerlink\" title=\"🎯 3.playwright调用购票接口\"></a>🎯 <strong>3.playwright调用购票接口</strong></h3><h4 id=\"📌-函数：make-request-with-retries\"><a href=\"#📌-函数：make-request-with-retries\" class=\"headerlink\" title=\"📌 函数：make_request_with_retries\"></a>📌 <strong>函数：<code>make_request_with_retries</code></strong></h4><p>此函数用于调用购票api，直到成功&#x2F;没有库存，并将返回的信息保存成日志，并返回日志信息。  </p>\n<h5 id=\"📌-函数参数\"><a href=\"#📌-函数参数\" class=\"headerlink\" title=\"📌 函数参数\"></a>📌 <strong>函数参数</strong></h5><ul>\n<li><code>context: APIRequestContext</code>：必须为APIRequestContext类型，其他类型没有get&#x2F;post方法。  </li>\n<li><code>ticket_Add_url</code>：购票url。  </li>\n<li><code>ticket_Add_params</code>：接口传参。  </li>\n<li><code>ticket_Add_headers</code>：请求头。</li>\n</ul>\n<h5 id=\"📜-代码实现-2\"><a href=\"#📜-代码实现-2\" class=\"headerlink\" title=\"📜 代码实现\"></a>📜 <strong>代码实现</strong></h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">with</span> async_playwright(context: APIRequestContext, ticket_Add_url, ticket_Add_params, ticket_Add_headers) <span class=\"keyword\">as</span> p:</span><br><span class=\"line\">    retries = <span class=\"number\">0</span></span><br><span class=\"line\">    backoff = <span class=\"number\">0.2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> retries &lt; max_retries:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> context.post(ticket_Add_url, params=ticket_Add_params, headers=ticket_Add_headers)</span><br><span class=\"line\">            current_time = datetime.now()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.ok:</span><br><span class=\"line\">                data = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">&#x27;success&#x27;</span> <span class=\"keyword\">in</span> data.get(<span class=\"string\">&quot;Message&quot;</span>, <span class=\"string\">&quot;&quot;</span>):</span><br><span class=\"line\">                    log_entry = <span class=\"string\">f&quot;数据=<span class=\"subst\">&#123;data&#125;</span>&quot;</span></span><br><span class=\"line\">                    log_data.append(log_entry)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> log_data</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    log_entry = <span class=\"string\">f&quot;数据=<span class=\"subst\">&#123;data&#125;</span>&quot;</span></span><br><span class=\"line\">                    log_data.append(log_entry)</span><br><span class=\"line\">                    retries += <span class=\"number\">1</span></span><br><span class=\"line\">                    delay = backoff * (<span class=\"number\">2</span> ** retries) + random.random()*<span class=\"number\">0.1</span></span><br><span class=\"line\">                    <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                error_entry = <span class=\"string\">f&quot;状态码: <span class=\"subst\">&#123;response.status&#125;</span>&quot;</span></span><br><span class=\"line\">                log_data.append(error_entry)</span><br><span class=\"line\">                retries += <span class=\"number\">1</span></span><br><span class=\"line\">                delay = backoff * (<span class=\"number\">2</span> ** retries) + random.random()*<span class=\"number\">0.1</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            error_entry = <span class=\"string\">f&quot;<span class=\"subst\">&#123;e&#125;</span>&quot;</span></span><br><span class=\"line\">            log_data.append(error_entry)</span><br><span class=\"line\">            retries += <span class=\"number\">1</span></span><br><span class=\"line\">            delay = backoff * (<span class=\"number\">2</span> ** retries) + random.random()*<span class=\"number\">0.1</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> log_data</span><br></pre></td></tr></table></figure>"},{"title":"Flask项目服务器部署","date":"2025-07-10T06:31:23.000Z","abstracts":"服务器部署","cover":"./images/resume_icon.jpg","_content":"\n# 🚀 Flask 项目部署教程（使用 Gunicorn + Nginx + HTTPS）\n本教程介绍如何在 Ubuntu 服务器上使用 Gunicorn + Nginx 部署 Flask 后端，并实现自定义域名绑定、HTTPS 自动签发及前端 Vercel 发布。\n\n# 🧱 项目结构概览\ntoolBackend/           # Flask 后端项目\ntoolFrontend/          # React 前端项目（已托管 GitHub）\n## ✅ 前提条件\n一台 Ubuntu 服务器（推荐 20.04+）\n\n已安装 Python3、pip、git\n\n已绑定域名（如：48api.tool4me.cn）\n\n已解析 A 记录至服务器公网 IP\n\n## 📦 1. 安装依赖\n``` bash\nsudo apt update\nsudo apt install nginx certbot python3-certbot-nginx\n```\n推荐使用虚拟环境管理依赖：\n``` bash\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n## ⚙️ 2. 使用 Gunicorn 启动 Flask 项目\n``` bash\ngunicorn app:app --bind 127.0.0.1:5000 --workers 4 --daemon\napp:app 表示：app.py 中的 app 实例\n```\n\n可将其写入 systemd 服务实现守护进程管理（可选）\n\n## 🌐 3. 配置 Nginx 反向代理\n编辑配置文件：\n``` bash\nsudo nano /etc/nginx/sites-available/your.domain.com\n```\n内容示例：\n``` bash\nserver {\n    listen 80;\n    server_name your.domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n创建软链接启用：\n``` bash\nsudo ln -s /etc/nginx/sites-available/your.domain.com /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n```\n## 🔒 4. 配置 HTTPS（Let's Encrypt）\n使用 certbot 自动签发证书：\n``` bash\nsudo certbot --nginx -d your.domain.com\n```\n证书自动续期设置：\n``` bash\nsudo systemctl status certbot.timer  # 默认已启用自动续期\n```\n## 🌍 5. 前端部署到 Vercel\n登录 vercel.com\n\n绑定你的 GitHub 仓库（如：toolFrontend）\n\n设置环境变量（如：API_URL 指向你的后端）\n\n自动部署成功后绑定自定义域名（如：tool4me.cn）\n\n## 🛡️ 6. 安全优化建议（可选）\n配置 fail2ban 防爆破\n\n使用 ufw 开启防火墙，仅开放 80 和 443 端口\n\n定期备份 MongoDB 数据和日志文件\n\n## 🎯 效果验证\n后端 API 可通过 https://your.domain.com/api/xxx 访问\n\n前端网页可通过 https://domain.com 访问\n\n数据传输加密、全球 CDN 加速生效\n\n## 👨‍💻 技术栈回顾\n模块\t技术栈\n后端\tFlask + Gunicorn + MongoDB\n前端\tReact + Semi Design + Vercel\n部署\tNginx + certbot + systemd\n域名 & 安全\tDNSPod + Let’s Encrypt\n","source":"_posts/flaskDeploy.md","raw":"---\ntitle: Flask项目服务器部署\ndate: 2025-07-10 14:31:23\nabstracts: 服务器部署\ntags: [服务器部署]\ncover: ./images/resume_icon.jpg\n---\n\n# 🚀 Flask 项目部署教程（使用 Gunicorn + Nginx + HTTPS）\n本教程介绍如何在 Ubuntu 服务器上使用 Gunicorn + Nginx 部署 Flask 后端，并实现自定义域名绑定、HTTPS 自动签发及前端 Vercel 发布。\n\n# 🧱 项目结构概览\ntoolBackend/           # Flask 后端项目\ntoolFrontend/          # React 前端项目（已托管 GitHub）\n## ✅ 前提条件\n一台 Ubuntu 服务器（推荐 20.04+）\n\n已安装 Python3、pip、git\n\n已绑定域名（如：48api.tool4me.cn）\n\n已解析 A 记录至服务器公网 IP\n\n## 📦 1. 安装依赖\n``` bash\nsudo apt update\nsudo apt install nginx certbot python3-certbot-nginx\n```\n推荐使用虚拟环境管理依赖：\n``` bash\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n## ⚙️ 2. 使用 Gunicorn 启动 Flask 项目\n``` bash\ngunicorn app:app --bind 127.0.0.1:5000 --workers 4 --daemon\napp:app 表示：app.py 中的 app 实例\n```\n\n可将其写入 systemd 服务实现守护进程管理（可选）\n\n## 🌐 3. 配置 Nginx 反向代理\n编辑配置文件：\n``` bash\nsudo nano /etc/nginx/sites-available/your.domain.com\n```\n内容示例：\n``` bash\nserver {\n    listen 80;\n    server_name your.domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n创建软链接启用：\n``` bash\nsudo ln -s /etc/nginx/sites-available/your.domain.com /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n```\n## 🔒 4. 配置 HTTPS（Let's Encrypt）\n使用 certbot 自动签发证书：\n``` bash\nsudo certbot --nginx -d your.domain.com\n```\n证书自动续期设置：\n``` bash\nsudo systemctl status certbot.timer  # 默认已启用自动续期\n```\n## 🌍 5. 前端部署到 Vercel\n登录 vercel.com\n\n绑定你的 GitHub 仓库（如：toolFrontend）\n\n设置环境变量（如：API_URL 指向你的后端）\n\n自动部署成功后绑定自定义域名（如：tool4me.cn）\n\n## 🛡️ 6. 安全优化建议（可选）\n配置 fail2ban 防爆破\n\n使用 ufw 开启防火墙，仅开放 80 和 443 端口\n\n定期备份 MongoDB 数据和日志文件\n\n## 🎯 效果验证\n后端 API 可通过 https://your.domain.com/api/xxx 访问\n\n前端网页可通过 https://domain.com 访问\n\n数据传输加密、全球 CDN 加速生效\n\n## 👨‍💻 技术栈回顾\n模块\t技术栈\n后端\tFlask + Gunicorn + MongoDB\n前端\tReact + Semi Design + Vercel\n部署\tNginx + certbot + systemd\n域名 & 安全\tDNSPod + Let’s Encrypt\n","slug":"flaskDeploy","published":1,"updated":"2025-07-28T02:18:55.396Z","_id":"cmdmh8dm1000060u7430zhz91","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"🚀-Flask-项目部署教程（使用-Gunicorn-Nginx-HTTPS）\"><a href=\"#🚀-Flask-项目部署教程（使用-Gunicorn-Nginx-HTTPS）\" class=\"headerlink\" title=\"🚀 Flask 项目部署教程（使用 Gunicorn + Nginx + HTTPS）\"></a>🚀 Flask 项目部署教程（使用 Gunicorn + Nginx + HTTPS）</h1><p>本教程介绍如何在 Ubuntu 服务器上使用 Gunicorn + Nginx 部署 Flask 后端，并实现自定义域名绑定、HTTPS 自动签发及前端 Vercel 发布。</p>\n<h1 id=\"🧱-项目结构概览\"><a href=\"#🧱-项目结构概览\" class=\"headerlink\" title=\"🧱 项目结构概览\"></a>🧱 项目结构概览</h1><p>toolBackend&#x2F;           # Flask 后端项目<br>toolFrontend&#x2F;          # React 前端项目（已托管 GitHub）</p>\n<h2 id=\"✅-前提条件\"><a href=\"#✅-前提条件\" class=\"headerlink\" title=\"✅ 前提条件\"></a>✅ 前提条件</h2><p>一台 Ubuntu 服务器（推荐 20.04+）</p>\n<p>已安装 Python3、pip、git</p>\n<p>已绑定域名（如：48api.tool4me.cn）</p>\n<p>已解析 A 记录至服务器公网 IP</p>\n<h2 id=\"📦-1-安装依赖\"><a href=\"#📦-1-安装依赖\" class=\"headerlink\" title=\"📦 1. 安装依赖\"></a>📦 1. 安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n<p>推荐使用虚拟环境管理依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"⚙️-2-使用-Gunicorn-启动-Flask-项目\"><a href=\"#⚙️-2-使用-Gunicorn-启动-Flask-项目\" class=\"headerlink\" title=\"⚙️ 2. 使用 Gunicorn 启动 Flask 项目\"></a>⚙️ 2. 使用 Gunicorn 启动 Flask 项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn app:app --<span class=\"built_in\">bind</span> 127.0.0.1:5000 --workers 4 --daemon</span><br><span class=\"line\">app:app 表示：app.py 中的 app 实例</span><br></pre></td></tr></table></figure>\n\n<p>可将其写入 systemd 服务实现守护进程管理（可选）</p>\n<h2 id=\"🌐-3-配置-Nginx-反向代理\"><a href=\"#🌐-3-配置-Nginx-反向代理\" class=\"headerlink\" title=\"🌐 3. 配置 Nginx 反向代理\"></a>🌐 3. 配置 Nginx 反向代理</h2><p>编辑配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/nginx/sites-available/your.domain.com</span><br></pre></td></tr></table></figure>\n<p>内容示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your.domain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建软链接启用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/nginx/sites-available/your.domain.com /etc/nginx/sites-enabled/</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"🔒-4-配置-HTTPS（Let’s-Encrypt）\"><a href=\"#🔒-4-配置-HTTPS（Let’s-Encrypt）\" class=\"headerlink\" title=\"🔒 4. 配置 HTTPS（Let’s Encrypt）\"></a>🔒 4. 配置 HTTPS（Let’s Encrypt）</h2><p>使用 certbot 自动签发证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> certbot --nginx -d your.domain.com</span><br></pre></td></tr></table></figure>\n<p>证书自动续期设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status certbot.timer  <span class=\"comment\"># 默认已启用自动续期</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"🌍-5-前端部署到-Vercel\"><a href=\"#🌍-5-前端部署到-Vercel\" class=\"headerlink\" title=\"🌍 5. 前端部署到 Vercel\"></a>🌍 5. 前端部署到 Vercel</h2><p>登录 vercel.com</p>\n<p>绑定你的 GitHub 仓库（如：toolFrontend）</p>\n<p>设置环境变量（如：API_URL 指向你的后端）</p>\n<p>自动部署成功后绑定自定义域名（如：tool4me.cn）</p>\n<h2 id=\"🛡️-6-安全优化建议（可选）\"><a href=\"#🛡️-6-安全优化建议（可选）\" class=\"headerlink\" title=\"🛡️ 6. 安全优化建议（可选）\"></a>🛡️ 6. 安全优化建议（可选）</h2><p>配置 fail2ban 防爆破</p>\n<p>使用 ufw 开启防火墙，仅开放 80 和 443 端口</p>\n<p>定期备份 MongoDB 数据和日志文件</p>\n<h2 id=\"🎯-效果验证\"><a href=\"#🎯-效果验证\" class=\"headerlink\" title=\"🎯 效果验证\"></a>🎯 效果验证</h2><p>后端 API 可通过 <a href=\"https://your.domain.com/api/xxx\">https://your.domain.com/api/xxx</a> 访问</p>\n<p>前端网页可通过 <a href=\"https://domain.com/\">https://domain.com</a> 访问</p>\n<p>数据传输加密、全球 CDN 加速生效</p>\n<h2 id=\"👨‍💻-技术栈回顾\"><a href=\"#👨‍💻-技术栈回顾\" class=\"headerlink\" title=\"👨‍💻 技术栈回顾\"></a>👨‍💻 技术栈回顾</h2><p>模块\t技术栈<br>后端\tFlask + Gunicorn + MongoDB<br>前端\tReact + Semi Design + Vercel<br>部署\tNginx + certbot + systemd<br>域名 &amp; 安全\tDNSPod + Let’s Encrypt</p>\n","excerpt":"","more":"<h1 id=\"🚀-Flask-项目部署教程（使用-Gunicorn-Nginx-HTTPS）\"><a href=\"#🚀-Flask-项目部署教程（使用-Gunicorn-Nginx-HTTPS）\" class=\"headerlink\" title=\"🚀 Flask 项目部署教程（使用 Gunicorn + Nginx + HTTPS）\"></a>🚀 Flask 项目部署教程（使用 Gunicorn + Nginx + HTTPS）</h1><p>本教程介绍如何在 Ubuntu 服务器上使用 Gunicorn + Nginx 部署 Flask 后端，并实现自定义域名绑定、HTTPS 自动签发及前端 Vercel 发布。</p>\n<h1 id=\"🧱-项目结构概览\"><a href=\"#🧱-项目结构概览\" class=\"headerlink\" title=\"🧱 项目结构概览\"></a>🧱 项目结构概览</h1><p>toolBackend&#x2F;           # Flask 后端项目<br>toolFrontend&#x2F;          # React 前端项目（已托管 GitHub）</p>\n<h2 id=\"✅-前提条件\"><a href=\"#✅-前提条件\" class=\"headerlink\" title=\"✅ 前提条件\"></a>✅ 前提条件</h2><p>一台 Ubuntu 服务器（推荐 20.04+）</p>\n<p>已安装 Python3、pip、git</p>\n<p>已绑定域名（如：48api.tool4me.cn）</p>\n<p>已解析 A 记录至服务器公网 IP</p>\n<h2 id=\"📦-1-安装依赖\"><a href=\"#📦-1-安装依赖\" class=\"headerlink\" title=\"📦 1. 安装依赖\"></a>📦 1. 安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n<p>推荐使用虚拟环境管理依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv venv</span><br><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"⚙️-2-使用-Gunicorn-启动-Flask-项目\"><a href=\"#⚙️-2-使用-Gunicorn-启动-Flask-项目\" class=\"headerlink\" title=\"⚙️ 2. 使用 Gunicorn 启动 Flask 项目\"></a>⚙️ 2. 使用 Gunicorn 启动 Flask 项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn app:app --<span class=\"built_in\">bind</span> 127.0.0.1:5000 --workers 4 --daemon</span><br><span class=\"line\">app:app 表示：app.py 中的 app 实例</span><br></pre></td></tr></table></figure>\n\n<p>可将其写入 systemd 服务实现守护进程管理（可选）</p>\n<h2 id=\"🌐-3-配置-Nginx-反向代理\"><a href=\"#🌐-3-配置-Nginx-反向代理\" class=\"headerlink\" title=\"🌐 3. 配置 Nginx 反向代理\"></a>🌐 3. 配置 Nginx 反向代理</h2><p>编辑配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/nginx/sites-available/your.domain.com</span><br></pre></td></tr></table></figure>\n<p>内容示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your.domain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:5000;</span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建软链接启用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/nginx/sites-available/your.domain.com /etc/nginx/sites-enabled/</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"🔒-4-配置-HTTPS（Let’s-Encrypt）\"><a href=\"#🔒-4-配置-HTTPS（Let’s-Encrypt）\" class=\"headerlink\" title=\"🔒 4. 配置 HTTPS（Let’s Encrypt）\"></a>🔒 4. 配置 HTTPS（Let’s Encrypt）</h2><p>使用 certbot 自动签发证书：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> certbot --nginx -d your.domain.com</span><br></pre></td></tr></table></figure>\n<p>证书自动续期设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status certbot.timer  <span class=\"comment\"># 默认已启用自动续期</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"🌍-5-前端部署到-Vercel\"><a href=\"#🌍-5-前端部署到-Vercel\" class=\"headerlink\" title=\"🌍 5. 前端部署到 Vercel\"></a>🌍 5. 前端部署到 Vercel</h2><p>登录 vercel.com</p>\n<p>绑定你的 GitHub 仓库（如：toolFrontend）</p>\n<p>设置环境变量（如：API_URL 指向你的后端）</p>\n<p>自动部署成功后绑定自定义域名（如：tool4me.cn）</p>\n<h2 id=\"🛡️-6-安全优化建议（可选）\"><a href=\"#🛡️-6-安全优化建议（可选）\" class=\"headerlink\" title=\"🛡️ 6. 安全优化建议（可选）\"></a>🛡️ 6. 安全优化建议（可选）</h2><p>配置 fail2ban 防爆破</p>\n<p>使用 ufw 开启防火墙，仅开放 80 和 443 端口</p>\n<p>定期备份 MongoDB 数据和日志文件</p>\n<h2 id=\"🎯-效果验证\"><a href=\"#🎯-效果验证\" class=\"headerlink\" title=\"🎯 效果验证\"></a>🎯 效果验证</h2><p>后端 API 可通过 <a href=\"https://your.domain.com/api/xxx\">https://your.domain.com/api/xxx</a> 访问</p>\n<p>前端网页可通过 <a href=\"https://domain.com/\">https://domain.com</a> 访问</p>\n<p>数据传输加密、全球 CDN 加速生效</p>\n<h2 id=\"👨‍💻-技术栈回顾\"><a href=\"#👨‍💻-技术栈回顾\" class=\"headerlink\" title=\"👨‍💻 技术栈回顾\"></a>👨‍💻 技术栈回顾</h2><p>模块\t技术栈<br>后端\tFlask + Gunicorn + MongoDB<br>前端\tReact + Semi Design + Vercel<br>部署\tNginx + certbot + systemd<br>域名 &amp; 安全\tDNSPod + Let’s Encrypt</p>\n"},{"title":"在服务器上搭建视频文件分发服务","date":"2025-07-10T06:31:23.000Z","abstracts":"服务搭建","cover":"./images/resume_icon.jpg","_content":"\n# 在服务器上搭建视频文件分发服务（FTP + Nginx）\n在开发前后端分离项目时，经常需要将静态资源如视频、文件等集中管理和访问。本篇记录如何在 Linux 服务器上创建一个 video 文件夹，配置 FTP 服务进行上传管理，并使用 Nginx 搭建文件下载站，实现前端直接访问链接播放视频的需求。\n\n## 一、目标说明\n✅ 在服务器上创建 /home/video 文件夹，用于存储视频资源\n\n✅ 配置 FTP 服务（vsftpd），方便上传管理视频\n\n✅ 使用 Nginx 映射该文件夹，实现网页可访问下载\n\n✅ 前端使用直接链接 https://yourdomain.com/video/xxx.mp4 播放视频\n\n## 二、创建视频文件夹\n``` bash\nsudo mkdir /home/video\nsudo chown -R www-data:www-data /home/video\nsudo chmod -R 755 /home/video\n``` \n### ✅ 如果你想通过 FTP 上传并非 www-data 用户，也可以给对应用户授权（见下方 FTP 配置）。\n\n## 三、配置 FTP 服务（vsftpd）\n### 1. 安装 vsftpd\n``` bash\nsudo apt update\nsudo apt install vsftpd -y\n``` \n### 2. 添加 FTP 用户（用于上传）\n``` bash\nsudo adduser ftpuser\nsudo passwd ftpuser\n``` \n把 /home/video 设置为 ftpuser 的主目录：\n``` bash\nsudo usermod -d /home/video ftpuser\nsudo chown -R ftpuser:ftpuser /home/video\n``` \n### 3. 编辑 vsftpd 配置文件\n``` bash\nsudo nano /etc/vsftpd.conf\n``` \n修改或添加以下内容：\n\n``` conf\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\nlocal_umask=022\nchroot_local_user=YES\nallow_writeable_chroot=YES\npasv_enable=YES\npasv_min_port=30000\npasv_max_port=30100\n``` \n保存并重启服务：\n``` bash\nsudo systemctl restart vsftpd\n``` \n### ✅ 你现在可以通过 FTP 工具（如 FileZilla）连接服务器上传视频文件到 /home/video 目录了。\n\n## 四、配置 Nginx 静态文件下载站\n### 1. 修改 Nginx 配置文件\n假设你已经部署了 Nginx，打开你的网站配置：\n``` bash\nsudo nano /etc/nginx/sites-available/default\n``` \n在 server 块中添加一段：\n\n``` nginx\nlocation /video/ {\n    alias /home/video/;\n    autoindex on;\n    add_header Content-Disposition \"inline\";\n    add_header Access-Control-Allow-Origin *;\n}\n``` \n### 2. 检查配置并重载 Nginx\n``` bash\nsudo nginx -t\nsudo systemctl reload nginx\n``` \n### 3. 访问测试\n现在你可以通过以下地址直接访问或播放视频了：\n\n``` arduino\nhttps://yourdomain.com/video/demo.mp4\n``` \n浏览器访问 /video/ 目录还可以列出文件清单（如果 autoindex 打开）。\n\n## 五、前端链接修改\n在 React 或 Vue 项目中，只需将视频资源链接改成：\n\n``` tsx\n<video src=\"https://yourdomain.com/video/sample.mp4\" controls />\n``` \n无需额外配置跨域，若接口为不同源，也可以通过 add_header Access-Control-Allow-Origin * 保证资源可访问。\n\n## 六、其他建议\n✅ 视频较多建议按日期或类别分文件夹上传，便于管理\n\n✅ 可配合定时任务（cron）清理过期视频文件\n\n✅ 如果你对权限有特殊需求，可单独创建用户组并控制文件访问\n\n## 七、总结\n通过本文配置，视频资源的上传、管理和前端访问将变得简单高效。适用于博客、后台管理系统、媒体内容平台等场景，结合 FTP 与 Nginx 的优势，即方便管理也支持高并发访问。\n\n如有更多需求，例如用户上传、权限管理、下载鉴权等，也可以进一步集成 Flask 或 Django 等后端服务做二次开发。","source":"_posts/vedioStorage.md","raw":"---\ntitle: 在服务器上搭建视频文件分发服务\ndate: 2025-07-10 14:31:23\nabstracts: 服务搭建\ntags: [服务搭建, ftp]\ncover: ./images/resume_icon.jpg\n---\n\n# 在服务器上搭建视频文件分发服务（FTP + Nginx）\n在开发前后端分离项目时，经常需要将静态资源如视频、文件等集中管理和访问。本篇记录如何在 Linux 服务器上创建一个 video 文件夹，配置 FTP 服务进行上传管理，并使用 Nginx 搭建文件下载站，实现前端直接访问链接播放视频的需求。\n\n## 一、目标说明\n✅ 在服务器上创建 /home/video 文件夹，用于存储视频资源\n\n✅ 配置 FTP 服务（vsftpd），方便上传管理视频\n\n✅ 使用 Nginx 映射该文件夹，实现网页可访问下载\n\n✅ 前端使用直接链接 https://yourdomain.com/video/xxx.mp4 播放视频\n\n## 二、创建视频文件夹\n``` bash\nsudo mkdir /home/video\nsudo chown -R www-data:www-data /home/video\nsudo chmod -R 755 /home/video\n``` \n### ✅ 如果你想通过 FTP 上传并非 www-data 用户，也可以给对应用户授权（见下方 FTP 配置）。\n\n## 三、配置 FTP 服务（vsftpd）\n### 1. 安装 vsftpd\n``` bash\nsudo apt update\nsudo apt install vsftpd -y\n``` \n### 2. 添加 FTP 用户（用于上传）\n``` bash\nsudo adduser ftpuser\nsudo passwd ftpuser\n``` \n把 /home/video 设置为 ftpuser 的主目录：\n``` bash\nsudo usermod -d /home/video ftpuser\nsudo chown -R ftpuser:ftpuser /home/video\n``` \n### 3. 编辑 vsftpd 配置文件\n``` bash\nsudo nano /etc/vsftpd.conf\n``` \n修改或添加以下内容：\n\n``` conf\nlisten=YES\nlisten_ipv6=NO\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\nlocal_umask=022\nchroot_local_user=YES\nallow_writeable_chroot=YES\npasv_enable=YES\npasv_min_port=30000\npasv_max_port=30100\n``` \n保存并重启服务：\n``` bash\nsudo systemctl restart vsftpd\n``` \n### ✅ 你现在可以通过 FTP 工具（如 FileZilla）连接服务器上传视频文件到 /home/video 目录了。\n\n## 四、配置 Nginx 静态文件下载站\n### 1. 修改 Nginx 配置文件\n假设你已经部署了 Nginx，打开你的网站配置：\n``` bash\nsudo nano /etc/nginx/sites-available/default\n``` \n在 server 块中添加一段：\n\n``` nginx\nlocation /video/ {\n    alias /home/video/;\n    autoindex on;\n    add_header Content-Disposition \"inline\";\n    add_header Access-Control-Allow-Origin *;\n}\n``` \n### 2. 检查配置并重载 Nginx\n``` bash\nsudo nginx -t\nsudo systemctl reload nginx\n``` \n### 3. 访问测试\n现在你可以通过以下地址直接访问或播放视频了：\n\n``` arduino\nhttps://yourdomain.com/video/demo.mp4\n``` \n浏览器访问 /video/ 目录还可以列出文件清单（如果 autoindex 打开）。\n\n## 五、前端链接修改\n在 React 或 Vue 项目中，只需将视频资源链接改成：\n\n``` tsx\n<video src=\"https://yourdomain.com/video/sample.mp4\" controls />\n``` \n无需额外配置跨域，若接口为不同源，也可以通过 add_header Access-Control-Allow-Origin * 保证资源可访问。\n\n## 六、其他建议\n✅ 视频较多建议按日期或类别分文件夹上传，便于管理\n\n✅ 可配合定时任务（cron）清理过期视频文件\n\n✅ 如果你对权限有特殊需求，可单独创建用户组并控制文件访问\n\n## 七、总结\n通过本文配置，视频资源的上传、管理和前端访问将变得简单高效。适用于博客、后台管理系统、媒体内容平台等场景，结合 FTP 与 Nginx 的优势，即方便管理也支持高并发访问。\n\n如有更多需求，例如用户上传、权限管理、下载鉴权等，也可以进一步集成 Flask 或 Django 等后端服务做二次开发。","slug":"vedioStorage","published":1,"updated":"2025-07-28T02:26:17.698Z","_id":"cmdmhey4300003gu7al459u2s","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"在服务器上搭建视频文件分发服务（FTP-Nginx）\"><a href=\"#在服务器上搭建视频文件分发服务（FTP-Nginx）\" class=\"headerlink\" title=\"在服务器上搭建视频文件分发服务（FTP + Nginx）\"></a>在服务器上搭建视频文件分发服务（FTP + Nginx）</h1><p>在开发前后端分离项目时，经常需要将静态资源如视频、文件等集中管理和访问。本篇记录如何在 Linux 服务器上创建一个 video 文件夹，配置 FTP 服务进行上传管理，并使用 Nginx 搭建文件下载站，实现前端直接访问链接播放视频的需求。</p>\n<h2 id=\"一、目标说明\"><a href=\"#一、目标说明\" class=\"headerlink\" title=\"一、目标说明\"></a>一、目标说明</h2><p>✅ 在服务器上创建 &#x2F;home&#x2F;video 文件夹，用于存储视频资源</p>\n<p>✅ 配置 FTP 服务（vsftpd），方便上传管理视频</p>\n<p>✅ 使用 Nginx 映射该文件夹，实现网页可访问下载</p>\n<p>✅ 前端使用直接链接 <a href=\"https://yourdomain.com/video/xxx.mp4\">https://yourdomain.com/video/xxx.mp4</a> 播放视频</p>\n<h2 id=\"二、创建视频文件夹\"><a href=\"#二、创建视频文件夹\" class=\"headerlink\" title=\"二、创建视频文件夹\"></a>二、创建视频文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> /home/video</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R www-data:www-data /home/video</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R 755 /home/video</span><br></pre></td></tr></table></figure>\n<h3 id=\"✅-如果你想通过-FTP-上传并非-www-data-用户，也可以给对应用户授权（见下方-FTP-配置）。\"><a href=\"#✅-如果你想通过-FTP-上传并非-www-data-用户，也可以给对应用户授权（见下方-FTP-配置）。\" class=\"headerlink\" title=\"✅ 如果你想通过 FTP 上传并非 www-data 用户，也可以给对应用户授权（见下方 FTP 配置）。\"></a>✅ 如果你想通过 FTP 上传并非 www-data 用户，也可以给对应用户授权（见下方 FTP 配置）。</h3><h2 id=\"三、配置-FTP-服务（vsftpd）\"><a href=\"#三、配置-FTP-服务（vsftpd）\" class=\"headerlink\" title=\"三、配置 FTP 服务（vsftpd）\"></a>三、配置 FTP 服务（vsftpd）</h2><h3 id=\"1-安装-vsftpd\"><a href=\"#1-安装-vsftpd\" class=\"headerlink\" title=\"1. 安装 vsftpd\"></a>1. 安装 vsftpd</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install vsftpd -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-添加-FTP-用户（用于上传）\"><a href=\"#2-添加-FTP-用户（用于上传）\" class=\"headerlink\" title=\"2. 添加 FTP 用户（用于上传）\"></a>2. 添加 FTP 用户（用于上传）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> adduser ftpuser</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> passwd ftpuser</span><br></pre></td></tr></table></figure>\n<p>把 &#x2F;home&#x2F;video 设置为 ftpuser 的主目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -d /home/video ftpuser</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R ftpuser:ftpuser /home/video</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-编辑-vsftpd-配置文件\"><a href=\"#3-编辑-vsftpd-配置文件\" class=\"headerlink\" title=\"3. 编辑 vsftpd 配置文件\"></a>3. 编辑 vsftpd 配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<p>修改或添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">local_umask=022</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\">allow_writeable_chroot=YES</span><br><span class=\"line\">pasv_enable=YES</span><br><span class=\"line\">pasv_min_port=30000</span><br><span class=\"line\">pasv_max_port=30100</span><br></pre></td></tr></table></figure>\n<p>保存并重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart vsftpd</span><br></pre></td></tr></table></figure>\n<h3 id=\"✅-你现在可以通过-FTP-工具（如-FileZilla）连接服务器上传视频文件到-home-video-目录了。\"><a href=\"#✅-你现在可以通过-FTP-工具（如-FileZilla）连接服务器上传视频文件到-home-video-目录了。\" class=\"headerlink\" title=\"✅ 你现在可以通过 FTP 工具（如 FileZilla）连接服务器上传视频文件到 &#x2F;home&#x2F;video 目录了。\"></a>✅ 你现在可以通过 FTP 工具（如 FileZilla）连接服务器上传视频文件到 &#x2F;home&#x2F;video 目录了。</h3><h2 id=\"四、配置-Nginx-静态文件下载站\"><a href=\"#四、配置-Nginx-静态文件下载站\" class=\"headerlink\" title=\"四、配置 Nginx 静态文件下载站\"></a>四、配置 Nginx 静态文件下载站</h2><h3 id=\"1-修改-Nginx-配置文件\"><a href=\"#1-修改-Nginx-配置文件\" class=\"headerlink\" title=\"1. 修改 Nginx 配置文件\"></a>1. 修改 Nginx 配置文件</h3><p>假设你已经部署了 Nginx，打开你的网站配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p>在 server 块中添加一段：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /video/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /home/video/;</span><br><span class=\"line\">    <span class=\"attribute\">autoindex</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Content-Disposition <span class=\"string\">&quot;inline&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-检查配置并重载-Nginx\"><a href=\"#2-检查配置并重载-Nginx\" class=\"headerlink\" title=\"2. 检查配置并重载 Nginx\"></a>2. 检查配置并重载 Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-访问测试\"><a href=\"#3-访问测试\" class=\"headerlink\" title=\"3. 访问测试\"></a>3. 访问测试</h3><p>现在你可以通过以下地址直接访问或播放视频了：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//yourdomain.com/video/demo.mp4</span></span><br></pre></td></tr></table></figure>\n<p>浏览器访问 &#x2F;video&#x2F; 目录还可以列出文件清单（如果 autoindex 打开）。</p>\n<h2 id=\"五、前端链接修改\"><a href=\"#五、前端链接修改\" class=\"headerlink\" title=\"五、前端链接修改\"></a>五、前端链接修改</h2><p>在 React 或 Vue 项目中，只需将视频资源链接改成：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video src=<span class=\"string\">&quot;https://yourdomain.com/video/sample.mp4&quot;</span> controls /&gt;</span><br></pre></td></tr></table></figure>\n<p>无需额外配置跨域，若接口为不同源，也可以通过 add_header Access-Control-Allow-Origin * 保证资源可访问。</p>\n<h2 id=\"六、其他建议\"><a href=\"#六、其他建议\" class=\"headerlink\" title=\"六、其他建议\"></a>六、其他建议</h2><p>✅ 视频较多建议按日期或类别分文件夹上传，便于管理</p>\n<p>✅ 可配合定时任务（cron）清理过期视频文件</p>\n<p>✅ 如果你对权限有特殊需求，可单独创建用户组并控制文件访问</p>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>通过本文配置，视频资源的上传、管理和前端访问将变得简单高效。适用于博客、后台管理系统、媒体内容平台等场景，结合 FTP 与 Nginx 的优势，即方便管理也支持高并发访问。</p>\n<p>如有更多需求，例如用户上传、权限管理、下载鉴权等，也可以进一步集成 Flask 或 Django 等后端服务做二次开发。</p>\n","excerpt":"","more":"<h1 id=\"在服务器上搭建视频文件分发服务（FTP-Nginx）\"><a href=\"#在服务器上搭建视频文件分发服务（FTP-Nginx）\" class=\"headerlink\" title=\"在服务器上搭建视频文件分发服务（FTP + Nginx）\"></a>在服务器上搭建视频文件分发服务（FTP + Nginx）</h1><p>在开发前后端分离项目时，经常需要将静态资源如视频、文件等集中管理和访问。本篇记录如何在 Linux 服务器上创建一个 video 文件夹，配置 FTP 服务进行上传管理，并使用 Nginx 搭建文件下载站，实现前端直接访问链接播放视频的需求。</p>\n<h2 id=\"一、目标说明\"><a href=\"#一、目标说明\" class=\"headerlink\" title=\"一、目标说明\"></a>一、目标说明</h2><p>✅ 在服务器上创建 &#x2F;home&#x2F;video 文件夹，用于存储视频资源</p>\n<p>✅ 配置 FTP 服务（vsftpd），方便上传管理视频</p>\n<p>✅ 使用 Nginx 映射该文件夹，实现网页可访问下载</p>\n<p>✅ 前端使用直接链接 <a href=\"https://yourdomain.com/video/xxx.mp4\">https://yourdomain.com/video/xxx.mp4</a> 播放视频</p>\n<h2 id=\"二、创建视频文件夹\"><a href=\"#二、创建视频文件夹\" class=\"headerlink\" title=\"二、创建视频文件夹\"></a>二、创建视频文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> /home/video</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R www-data:www-data /home/video</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> -R 755 /home/video</span><br></pre></td></tr></table></figure>\n<h3 id=\"✅-如果你想通过-FTP-上传并非-www-data-用户，也可以给对应用户授权（见下方-FTP-配置）。\"><a href=\"#✅-如果你想通过-FTP-上传并非-www-data-用户，也可以给对应用户授权（见下方-FTP-配置）。\" class=\"headerlink\" title=\"✅ 如果你想通过 FTP 上传并非 www-data 用户，也可以给对应用户授权（见下方 FTP 配置）。\"></a>✅ 如果你想通过 FTP 上传并非 www-data 用户，也可以给对应用户授权（见下方 FTP 配置）。</h3><h2 id=\"三、配置-FTP-服务（vsftpd）\"><a href=\"#三、配置-FTP-服务（vsftpd）\" class=\"headerlink\" title=\"三、配置 FTP 服务（vsftpd）\"></a>三、配置 FTP 服务（vsftpd）</h2><h3 id=\"1-安装-vsftpd\"><a href=\"#1-安装-vsftpd\" class=\"headerlink\" title=\"1. 安装 vsftpd\"></a>1. 安装 vsftpd</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install vsftpd -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-添加-FTP-用户（用于上传）\"><a href=\"#2-添加-FTP-用户（用于上传）\" class=\"headerlink\" title=\"2. 添加 FTP 用户（用于上传）\"></a>2. 添加 FTP 用户（用于上传）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> adduser ftpuser</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> passwd ftpuser</span><br></pre></td></tr></table></figure>\n<p>把 &#x2F;home&#x2F;video 设置为 ftpuser 的主目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -d /home/video ftpuser</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chown</span> -R ftpuser:ftpuser /home/video</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-编辑-vsftpd-配置文件\"><a href=\"#3-编辑-vsftpd-配置文件\" class=\"headerlink\" title=\"3. 编辑 vsftpd 配置文件\"></a>3. 编辑 vsftpd 配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n<p>修改或添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen=YES</span><br><span class=\"line\">listen_ipv6=NO</span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">local_umask=022</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\">allow_writeable_chroot=YES</span><br><span class=\"line\">pasv_enable=YES</span><br><span class=\"line\">pasv_min_port=30000</span><br><span class=\"line\">pasv_max_port=30100</span><br></pre></td></tr></table></figure>\n<p>保存并重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart vsftpd</span><br></pre></td></tr></table></figure>\n<h3 id=\"✅-你现在可以通过-FTP-工具（如-FileZilla）连接服务器上传视频文件到-home-video-目录了。\"><a href=\"#✅-你现在可以通过-FTP-工具（如-FileZilla）连接服务器上传视频文件到-home-video-目录了。\" class=\"headerlink\" title=\"✅ 你现在可以通过 FTP 工具（如 FileZilla）连接服务器上传视频文件到 &#x2F;home&#x2F;video 目录了。\"></a>✅ 你现在可以通过 FTP 工具（如 FileZilla）连接服务器上传视频文件到 &#x2F;home&#x2F;video 目录了。</h3><h2 id=\"四、配置-Nginx-静态文件下载站\"><a href=\"#四、配置-Nginx-静态文件下载站\" class=\"headerlink\" title=\"四、配置 Nginx 静态文件下载站\"></a>四、配置 Nginx 静态文件下载站</h2><h3 id=\"1-修改-Nginx-配置文件\"><a href=\"#1-修改-Nginx-配置文件\" class=\"headerlink\" title=\"1. 修改 Nginx 配置文件\"></a>1. 修改 Nginx 配置文件</h3><p>假设你已经部署了 Nginx，打开你的网站配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p>在 server 块中添加一段：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /video/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /home/video/;</span><br><span class=\"line\">    <span class=\"attribute\">autoindex</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Content-Disposition <span class=\"string\">&quot;inline&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-检查配置并重载-Nginx\"><a href=\"#2-检查配置并重载-Nginx\" class=\"headerlink\" title=\"2. 检查配置并重载 Nginx\"></a>2. 检查配置并重载 Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-访问测试\"><a href=\"#3-访问测试\" class=\"headerlink\" title=\"3. 访问测试\"></a>3. 访问测试</h3><p>现在你可以通过以下地址直接访问或播放视频了：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//yourdomain.com/video/demo.mp4</span></span><br></pre></td></tr></table></figure>\n<p>浏览器访问 &#x2F;video&#x2F; 目录还可以列出文件清单（如果 autoindex 打开）。</p>\n<h2 id=\"五、前端链接修改\"><a href=\"#五、前端链接修改\" class=\"headerlink\" title=\"五、前端链接修改\"></a>五、前端链接修改</h2><p>在 React 或 Vue 项目中，只需将视频资源链接改成：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video src=<span class=\"string\">&quot;https://yourdomain.com/video/sample.mp4&quot;</span> controls /&gt;</span><br></pre></td></tr></table></figure>\n<p>无需额外配置跨域，若接口为不同源，也可以通过 add_header Access-Control-Allow-Origin * 保证资源可访问。</p>\n<h2 id=\"六、其他建议\"><a href=\"#六、其他建议\" class=\"headerlink\" title=\"六、其他建议\"></a>六、其他建议</h2><p>✅ 视频较多建议按日期或类别分文件夹上传，便于管理</p>\n<p>✅ 可配合定时任务（cron）清理过期视频文件</p>\n<p>✅ 如果你对权限有特殊需求，可单独创建用户组并控制文件访问</p>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>通过本文配置，视频资源的上传、管理和前端访问将变得简单高效。适用于博客、后台管理系统、媒体内容平台等场景，结合 FTP 与 Nginx 的优势，即方便管理也支持高并发访问。</p>\n<p>如有更多需求，例如用户上传、权限管理、下载鉴权等，也可以进一步集成 Flask 或 Django 等后端服务做二次开发。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cmclckrns000110u713p3a93n","tag_id":"cmclckrnv000210u7c2fcdqal","_id":"cmclckrny000410u7aute36y7"},{"post_id":"cmclckrns000110u713p3a93n","tag_id":"cmclckrnx000310u7f5z570tj","_id":"cmclckrnz000510u7e4ct3ygv"},{"post_id":"cmclckrnz000610u7axai7gkg","tag_id":"cmclckrnv000210u7c2fcdqal","_id":"cmclckro1000810u797jkbulw"},{"post_id":"cmclckrnz000610u7axai7gkg","tag_id":"cmclckrnx000310u7f5z570tj","_id":"cmclckro1000910u7g53c4jvi"},{"post_id":"cmclckrnz000610u7axai7gkg","tag_id":"cmclckro1000710u7g2p06qng","_id":"cmclckro1000a10u72ucp7rhn"},{"post_id":"cmdmh8dm1000060u7430zhz91","tag_id":"cmdmh8dm4000160u7exiwa3hj","_id":"cmdmh8dm6000260u7dlpwer20"},{"post_id":"cmdmhey4300003gu7al459u2s","tag_id":"cmdmhjlgg00013gu7afog2k3l","_id":"cmdmhjlgh00033gu7azqiank1"},{"post_id":"cmdmhey4300003gu7al459u2s","tag_id":"cmdmhjlgh00023gu73n56frna","_id":"cmdmhjlgh00043gu7b7wu0iy1"}],"Tag":[{"name":"python","_id":"cmclckrnv000210u7c2fcdqal"},{"name":"爬虫","_id":"cmclckrnx000310u7f5z570tj"},{"name":"playwright","_id":"cmclckro1000710u7g2p06qng"},{"name":"服务器部署","_id":"cmdmh8dm4000160u7exiwa3hj"},{"name":"服务搭建","_id":"cmdmhjlgg00013gu7afog2k3l"},{"name":"ftp","_id":"cmdmhjlgh00023gu73n56frna"}]}}